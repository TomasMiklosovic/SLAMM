#########################################################
##  After the source data are imported, there are few operations we need to make to prepare the data for simulation. These are done in a form of processes ran exclusively
##  in the “initial” simulation period in the first out of the chain of scripts, the “DEMO” script.
######################################################### 

#########################################################
##  The demographic module DEMO, simulates demographic processes of the Slovak population; ageing, fertility, mortality and migration. 
#########################################################

entities:
    person:
        fields:
            - sex: int
            - qual4: int
            - qual3: int
            - isco: int
            - ageg: int
            - ilostat: int
            - hatfield1: int
            - status: int
            - status1y: {type: int, initialdata: False}
            - nace10: int
            - nace10_1y: int
            - coeff: float
            - hatlev3: int
            - hatlev5: int
            - country_b: int 
            - number_children: int            
            - age: {type: int, initialdata: False}           
            - to_give_birth: {type: bool, initialdata: False}
            - dead: {type: bool, initialdata: False}
            - age_float: {type: float, initialdata: False}
            - days: {type: float, initialdata: False}
            - nace_origin: {type: int, initialdata: False}
            - nace: {type: int, initialdata: False}
            - nace1y: {type: int, initialdata: False}
            - qual: {type: int, initialdata: False}     
            - qual1y: {type: int, initialdata: False}     
            - to_immigrate: {type: bool, initialdata: False}
            - immigrant_sim: {type: bool, initialdata: False}
            - immigrant_score: {type: float, initialdata: False}
            - immigrant: {type: bool, initialdata: False}
            - time_to_leave: {type: int, initialdata: False}
            - leave: {type: bool, initialdata: False}
           
        macros:
            UNSET: -1

            ISMALE: sex == 1
            ISFEMALE: sex == 2            
            
        processes:     
##################################################
##  Processes “age1” disaggregates the 5 years age-groups  into one year age cohorts. For this disaggregation a random function was used keeping the proportions of each
##  of the one year age cohort within the 5 years age cohorts as they were observed in the demographic statistics by the end of 2018.
##################################################        

            age1():
#                Based on detailed age structure in 2018 from administrative data (EUROSTAT:demo_pjan)
               - age: 
                    if(ageg==2, 
                      choice([0, 1, 2, 3, 4],
                      [0.203979218, 0.205087065, 0.198922715, 0.196578525, 0.195432477]),
                    if(ageg==7,
                      choice([5, 6, 7, 8, 9],
                      [0.193951561, 0.20959243, 0.198198352, 0.203951629, 0.194306028]),
                    if(ageg==12,
                      choice([10, 11, 12, 13, 14],
                      [0.202882727, 0.200863029, 0.202908812, 0.201004632, 0.1923408]),
                    if(ageg==17,
                      choice([15, 16, 17, 18, 19],
                      [0.18814518, 0.190834238, 0.203579485, 0.207005626, 0.210435471]),
                    if(ageg==22,
                      choice([20, 21, 22, 23, 24],
                      [0.184223776, 0.188066033, 0.192229264, 0.207359133, 0.228121794]),               
                    if(ageg==27,
                      choice([25, 26, 27, 28, 29],
                      [0.189464481, 0.198413372, 0.202016072, 0.201823208, 0.208282867]),
                    if(ageg==32,
                      choice([30, 31, 32, 33, 34],
                      [0.191516351, 0.196859957, 0.203631495, 0.2036737, 0.204318497]),               
                    if(ageg==37,
                      choice([35, 36, 37, 38, 39],
                      [0.195019183, 0.195275696, 0.197352338, 0.207015079, 0.205337704]),
                    if(ageg==42,
                      choice([40, 41, 42, 43, 44],
                      [0.205660267, 0.204740519, 0.200161965, 0.19994661, 0.189490639]),               
                    if(ageg==47,
                      choice([45, 46, 47, 48, 49],
                      [0.217231043, 0.204795904, 0.198287333, 0.194645048, 0.185040672]),
                    if(ageg==52,
                      choice([50, 51, 52, 53, 54],
                      [0.189814853, 0.196017917, 0.201428567, 0.208148785, 0.204589878]),                
                    if(ageg==57,
                      choice([55, 56, 57, 58, 59],
                      [0.196151016, 0.202013135, 0.200853533, 0.197012354, 0.203969962]),           
                      
                    if(ageg==62,
                    if(sex==2,
                    if(status==1,
                      choice([60, 61, 62, 63, 64],
                      [0.35,0.30,0.15,0.12,0.08]),
                    if(status!=4,
                      choice([60, 61, 62, 63, 64],
                      [0.50, 0.30, 0.20, 0, 0]),
                      choice([60, 61, 62, 63, 64],
                      [0.09, 0.14, 0.22, 0.27, 0.28]))),
                    if(status==1,
                       choice([60, 61, 62, 63, 64],
                       [0.38,0.32,0.15,0.09,0.06]),
                    if(status!=4,
                       choice([60, 61, 62, 63, 64],
                       [0.40,0.35,0.25,0.00,0.00]),
                       choice([60, 61, 62, 63, 64],
                      [0.03,0.08,0.23,0.32,0.34])))),
                      
                    if(ageg==67,
                      choice([65, 66, 67, 68, 69],
                      [0.223369371, 0.216272599, 0.202598173, 0.18246217, 0.175297687]),
                    if(ageg==72,
                      choice([70, 71, 72, 73, 74],
                      [0.245901007, 0.206046406, 0.187104985, 0.18941903, 0.171528572]),
                      choice([75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99],
                      [0.10551045, 0.100824162, 0.095218392, 0.084788412, 0.076700044, 0.0698683, 0.064369803, 0.060275047, 0.053884654, 0.049339353, 0.045931143, 0.039399763, 0.033643811, 0.027826561, 0.021997052, 0.017767439, 0.01404354, 0.011015383, 0.008713615, 0.006359744, 0.004729198, 0.003356106, 0.002219014, 0.001538598, 0.000680416])
                           )))))))))))))))
                           
               - days: uniform()
               - number_children: 
                    if(sex==2, 
                    if(age==15, choice([0,1,2,3,4,5], [0.986894199, 0.009279884, 0.0028142, 0.000627962, 0.000081403, 0.000302352]),
                    if(age==16, choice([0,1,2,3,4,5], [0.972964604, 0.019143075, 0.005805294, 0.001295396, 0.000167922, 0.000623709]),
                    if(age==17, choice([0,1,2,3,4,5], [0.945854318, 0.038339179, 0.011626668, 0.002594381, 0.000336309, 0.001249146]),
                    if(age==18, choice([0,1,2,3,4,5], [0.924360803, 0.053558189, 0.016241957, 0.003624238, 0.000469809, 0.001745004]),
                    if(age==19, choice([0,1,2,3,4,5], [0.893805564, 0.075193576, 0.022803064, 0.005088287, 0.000659593, 0.002449916]),
                    if(ageg==22, choice([0,1,2,3,4,5], [0.775409174, 0.1548844, 0.050839918, 0.011924579, 0.003682094, 0.003259835]),
                    if(ageg==27, choice([0,1,2,3,4,5], [0.498227223, 0.283783981, 0.165865209, 0.03199456, 0.008535919, 0.011593109]),
                    if(ageg==32, choice([0,1,2,3,4,5], [0.239286796, 0.297193172, 0.357427035, 0.072616912, 0.015226243, 0.018249843]),
                    if(ageg==37, choice([0,1,2,3,4,5], [0.117041429, 0.226295889, 0.469170645, 0.129395516, 0.030401638, 0.027694884]),
                    if(ageg==42, choice([0,1,2,3,4,5], [0.093422362, 0.162032979, 0.488969354, 0.169296383, 0.047507487, 0.038771434]),
                    if(ageg==47, choice([0,1,2,3,4,5], [0.066209477, 0.120922745, 0.506486311, 0.206457379, 0.059627201, 0.040296887]),
                    if(ageg==52, choice([0,1,2,3,4,5], [0.045520645, 0.099103898, 0.504747978, 0.238972207, 0.068686104, 0.04296917]),
                    if(ageg==57, choice([0,1,2,3,4,5], [0.037372373, 0.090605337, 0.498056975, 0.256282522, 0.074567151, 0.043115643]),
                    if(ageg>=62, choice([0,1,2,3,4,5], [0.024919804, 0.092351637, 0.459815267, 0.272170629, 0.091654525, 0.059088137]),
                    choice([0,1,2,3,4,5], [1, 0, 0, 0, 0, 0]))))))))))))))),0)
                    
               - status1y: status 
#########################################################################
##  Analogously, process “time_to_leave” randomly assigns the time of stay (in years) to immigrants. 
######################################################################### 

            time_to_leave1():
               - time_to_leave: if(country_b>1, choice([0, 1, 2, 3, 4, 5, 6, 7, 8, 9], [0.1, 0.16, 0.18, 0.16, 0.1, 0.08, 0.07, 0.06, 0.05, 0.04]), 0)

               
######################################################################### 
##  Ageing process changes two attributes of persons. Two main fields (“age” and “time_to_leave”) increase by an increment of one each period. 
##  Attribute “age” is coded  in one-year age groups in the source file. Ageing is a deterministic process described by the function: 
##  F1: age= age + 1 
##  The field “time_to_leave” is a measure of how many years is an immigrant in the country. Process run annually, for each individual. 
##  Supporting attributes (fields) are created: 
##  •	ageg – 5 years age group, created ex-post for easier analysis of results
##  •	age_float – a float version of age
######################################################################### 
               
            ageing():           
               - age: age + 1
               - ageg: 5 * trunc(age / 5)+2 
               - ageg: if(age<15, 15,
                          if(age>74, 14, ageg))
               - age_float: age+days
               - time_to_leave: if(country_b!=1, time_to_leave + 1, 0)

#########################################################################                
##  Birth is a process designed to simulate fertility. It is a probability function evaluating all women of the age group 15-49. This function decides whether each of the women
##  from the age group gave birth in each of the simulation periods (years). The total proportion of women giving birth in each of the age cohorts is aligned by the age-specific
##  fertility tables available from the EUROPOP population predictions produced by Eurostat . These were transformed into the table “EUROPOP_fertility_MT.csv” available 
##  in the INPUT _DATA folder. Within a one-year age group, the probability of giving birth has a uniform distribution; no other individual characteristics are taken into account.                                
##  In cases where women gave birth, a new row is added to the database for the new-born .  The process "birth" assigns a new field "to_give_birth" to females between 15 and 50
##  years of age and subsequently creates a new entity (person). “to_give_birth” takes values True or False. True is assigned randomly to the share of female in a particular 
##  age cohort defined in the by alignment table (fertility). The table EUROPOP_fertility_MT.csv is the age-specific fertility table from the EUROPOP predictions; 
##  extracted from Eurostat: proj_15naasfr. The "new" command generates a new entity (person) to each women having the field "to_give_birth" set to true for this period. 
##  The new-borns have age 0 they are students. Their gender is assigned randomly using the function "choice" keeping the gender proportions of the 0 age population. 
#########################################################################                

            birth():
#                FOR STARTING WITH "False" FOR ALL FOR SURE IN SUCCESIVE PERIODS (not sure that necessary but)
#                50 is missing in alignment table
               - to_give_birth: False
               - to_give_birth: logit_regr (0.0, filter=(ISFEMALE and (age >= 15) and (age < 50)), align='fertility_EUROPOP.csv')
               - number_children: if(to_give_birth, number_children+1, number_children)
               - new('person', filter=to_give_birth,
                      hatlev3 = -2,
                      hatlev5 = -2,
                      hatfield1= -2,
                      ilostat= 3,
                      age = 0,
                      ageg = 2,
                      status = 3,
                      country_b = 1,
                      days = uniform(),
                      age_float = age+days,
                      number_children = 0,
                      sex = choice([1, 2], [0.5131, 0.4869]))                           

                      
#########################################################################                      
##  The death process simulates mortality of the population. The process of death has an analogous design, but runs on the whole population including males and without 
##  restrictions in terms of the age cohort. It is a probability function with uniform distribution aligned within a one-year age group aligned by the age-specific mortality 
##  tables . Age-specific mortality tables align the proportions within the age group for males and females separately; thus, gender is also taken into account in simulating 
##  mortality.                
##  The process "death" assigns a new field "dead" to males and females between 0 and 100 years of age and subsequently removes this entity (person).  Attribute (field) "dead" 
##  takes values True or False. True is assigned randomly to the share of people (by gender specific) in a particular age cohort defined in the by alignment table (mortality 
##  by gender). The tables “EUROPOP_mortality_male_MT.csv” and “EUROPOP_mortality_female_MT.csv” are age-specific mortality tables from the EUROPOP predictions from year 2015; 
##  extracted from Eurostat: proj_15naasmr. 
##  The "remove" command drops the entity from the database if the entity with the field "dead" set to true for this period. The csv file stores information on the removed 
##  cases with their attributes, before dropping the entity from database. This is done for further analytical purposes. 
##  Another part of the process "death" is field "leave". This field simulates the departure of immigrants from the country based on how many years are immigrants in the country.
##  This probability is in the alignment table "leave.csv", created based on the administrative data on employed immigrants. 
##  Field "leave" takes values True or False. True is assigned randomly to the people. Another csv file with important attributes of dropped cases is created before dropping 
##  the entity with field leaves the database. 
#########################################################################               
               
            death():
               - dead: if(ISMALE,
                           logit_regr(0.0, align='mortality_male_EUROPOP.csv'),
                           logit_regr(0.0, align='mortality_female_EUROPOP.csv'))           
#               - csv(period, groupby(period, sex, status, immigrant, immigrant_new, nace, dead, period), fname='replacement_dead.csv', mode='a')                                
               - remove(dead)
                              
               - tab_leave: load('leave.csv', fields=[('PERIOD', int), ('L_1', float), ('L_2', float), ('L_3', float), ('L_4', float), ('L_5', float), ('L_6', float), ('L_7', float), ('L_8', float), ('L_9', float), ('L_10', float), ('L_11', float)])
# base scenario
               - leave: if(time_to_leave==1, choice([True, False], [0.20, .80]),
                        if(time_to_leave==2, choice([True, False], [0.25, .75]),
                        if(time_to_leave==3, choice([True, False], [0.20, .80]),
                        if(time_to_leave==4, choice([True, False], [0.18, .82]),
                        if(time_to_leave==5, choice([True, False], [0.16, .84]),
                        if(time_to_leave==6, choice([True, False], [0.14, .86]),
                        if(time_to_leave==7, choice([True, False], [0.12, .88]),
                        if(time_to_leave==8, choice([True, False], [0.10, .90]),
                        if(time_to_leave==9, choice([True, False], [0.08, .92]),
                        if(time_to_leave>=10, choice([True, False], [0.05, .95]),False))))))))))
                        
#               - csv(period, groupby(period, status, hatlev5, nace, leave, immigrant, immigrant_new, period), fname='replacement_leave.csv', mode='a')                                
               - remove(leave)

#########################################################################               
##  The process immigration designed to simulating migration only creates one attribute (new field) “immigrant”. Immigrant takes values True or False. Value is set to True if 
##  person´s country of birth is not Slovakia.  This attribute is used in the following processes. 
##  During the development phase, immigration was simulated based on demographic assumptions, this approach was later abandoned in favour of cloning immigrants for vacant 
##  jobs (see module EMPL). 
#########################################################################               
                
            immigration(): 
               - immigrant_sim: False
               - to_immigrate: False
               - immigrant_score: if(country_b!=1, 2, 0)
               - immigrant: if(country_b!=1, True, False)
               - immigrant: if(immigrant_sim, True, immigrant)

               - nace1y: nace
               - qual1y: qual

###########################################################
##  Process “nace1” transforms the observed attributes nace10 and qual4 into the attributes used in the simulation: “nace” and “qual”. Additionally, it randomly assigns 
##  gender to the few LFS observations with missing information on gender.                
###########################################################

            nace1(): 
               - nace_origin: nace10
               - nace: nace10 
               - nace1y: nace 
               - qual: qual4
               - qual1y: qual

            csv_output():
               - csv(dump(period, days, age, age_float, sex), fname='days_.csv')
  
simulation:
   init: 
        - person: [age1, nace1, time_to_leave1]
   processes:   
        - person: [ageing, birth, death, immigration]
    
   input:
        path:   "INPUT_DATA"
        file:   "lfs2018.h5"

   output:
        path:   "OUTPUT_DATA"
        file:   "simulation.h5"
        
   start_period: 2019
    
   periods: 1 
   random_seed: 1    
            