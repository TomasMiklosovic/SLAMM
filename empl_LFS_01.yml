import: 
     - demo_LFS_01.yml
     - edu_LFS_01.yml
     - ea_LFS_01.yml

####################################################################   
##  In the next step, the economically active are divided between employed and unemployed based on a matching function, within a consequent EMPL module. The EMPL module simulates 
##  employment of those who were assigned as economically active. This group is divided between employed and unemployed based on the results of matching individuals to jobs. 
##  Matching is done for each labour market segment separately. A labour market segment is defined as a combination of the economic sector and qualification level . Based on 
##  the assignment to a specific labour market segment, resulting from the matching process, individuals´ attributes (economic sector and qualification level) change in 
##  the simulated period.     
##  Matching is done in subsequent steps, by first: 
##  1.	Calculating a segment-specific employment score (“employment_score”)
##  2.	Keeping the job from the previous period (“employment_old”)
##  3.	Filling in vacancies (“employment_new”)
##  4.	Cloning immigrants for unfilled vacancies (“employment_immigrants”)
##  5.	Defining economic sector and qualification level resulting from matching (“employment_nace”)
##  After the matching and related immigration family members of immigrants are generated (“immigrant_family”); simulating the level of unemployment (“unemployment”) and creating
## the predefined results tables (“csv_output”). 
####################################################################   
     
globals:
     countrytable:
         path: global_country.csv
         transposed: True 
         fields:
               - PERIOD: int
               - cou_2_N1q1: float
               - cou_3_N1q1: float
               - cou_4_N1q1: float
               - cou_2_N2q1: float
               - cou_3_N2q1: float
               - cou_4_N2q1: float
               - cou_2_N3q1: float
               - cou_3_N3q1: float
               - cou_4_N3q1: float
               - cou_2_N4q1: float
               - cou_3_N4q1: float
               - cou_4_N4q1: float
               - cou_2_N5q1: float
               - cou_3_N5q1: float
               - cou_4_N5q1: float
               - cou_2_N6q1: float
               - cou_3_N6q1: float
               - cou_4_N6q1: float
               - cou_2_N7q1: float
               - cou_3_N7q1: float
               - cou_4_N7q1: float
               - cou_2_N8q1: float
               - cou_3_N8q1: float
               - cou_4_N8q1: float
               - cou_2_N9q1: float
               - cou_3_N9q1: float
               - cou_4_N9q1: float
               - cou_2_N10q1: float
               - cou_3_N10q1: float
               - cou_4_N10q1: float
          
               - cou_2_N1q2: float
               - cou_3_N1q2: float
               - cou_4_N1q2: float
               - cou_2_N2q2: float
               - cou_3_N2q2: float
               - cou_4_N2q2: float
               - cou_2_N3q2: float
               - cou_3_N3q2: float
               - cou_4_N3q2: float
               - cou_2_N4q2: float
               - cou_3_N4q2: float
               - cou_4_N4q2: float
               - cou_2_N5q2: float
               - cou_3_N5q2: float
               - cou_4_N5q2: float
               - cou_2_N6q2: float
               - cou_3_N6q2: float
               - cou_4_N6q2: float
               - cou_2_N7q2: float
               - cou_3_N7q2: float
               - cou_4_N7q2: float
               - cou_2_N8q2: float
               - cou_3_N8q2: float
               - cou_4_N8q2: float
               - cou_2_N9q2: float
               - cou_3_N9q2: float
               - cou_4_N9q2: float
               - cou_2_N10q2: float
               - cou_3_N10q2: float
               - cou_4_N10q2: float
        
               - cou_2_N1q3: float
               - cou_3_N1q3: float
               - cou_4_N1q3: float
               - cou_2_N2q3: float
               - cou_3_N2q3: float
               - cou_4_N2q3: float
               - cou_2_N3q3: float
               - cou_3_N3q3: float
               - cou_4_N3q3: float
               - cou_2_N4q3: float
               - cou_3_N4q3: float
               - cou_4_N4q3: float
               - cou_2_N5q3: float
               - cou_3_N5q3: float
               - cou_4_N5q3: float
               - cou_2_N6q3: float
               - cou_3_N6q3: float
               - cou_4_N6q3: float
               - cou_2_N7q3: float
               - cou_3_N7q3: float
               - cou_4_N7q3: float
               - cou_2_N8q3: float
               - cou_3_N8q3: float
               - cou_4_N8q3: float
               - cou_2_N9q3: float
               - cou_3_N9q3: float
               - cou_4_N9q3: float
               - cou_2_N10q3: float
               - cou_3_N10q3: float
               - cou_4_N10q3: float

               - cou_2_N1q4: float
               - cou_3_N1q4: float
               - cou_4_N1q4: float
               - cou_2_N2q4: float
               - cou_3_N2q4: float
               - cou_4_N2q4: float
               - cou_2_N3q4: float
               - cou_3_N3q4: float
               - cou_4_N3q4: float
               - cou_2_N4q4: float
               - cou_3_N4q4: float
               - cou_4_N4q4: float
               - cou_2_N5q4: float
               - cou_3_N5q4: float
               - cou_4_N5q4: float
               - cou_2_N6q4: float
               - cou_3_N6q4: float
               - cou_4_N6q4: float
               - cou_2_N7q4: float
               - cou_3_N7q4: float
               - cou_4_N7q4: float
               - cou_2_N8q4: float
               - cou_3_N8q4: float
               - cou_4_N8q4: float
               - cou_2_N9q4: float
               - cou_3_N9q4: float
               - cou_4_N9q4: float
               - cou_2_N10q4: float
               - cou_3_N10q4: float
               - cou_4_N10q4: float

         
# definig fields from input file and new fields               
entities: 
     person: 
         fields:                     
            - replacement: {type: bool, initialdata: False}
            - replacement_inflow: {type: bool, initialdata: False}
            - matched: {type: bool, initialdata: False}
            - employed: {type: bool, initialdata: False}           
            - employed_pool: {type: bool, initialdata: False} 
            - immigrant_new: {type: bool, initialdata: False}            
            - immigrant_sim: {type: bool, initialdata: False}  
            - immigrant_sim2: {type: bool, initialdata: False}                
            - immigrant_fam: {type: bool, initialdata: False}
            - immigrant_fam_p: {type: bool, initialdata: False}
            - country_p: {type: bool, initialdata: False}
            
#naceq creating 
            - nace1q1: {type: bool, initialdata: False}
            - nace2q1: {type: bool, initialdata: False}
            - nace3q1: {type: bool, initialdata: False}
            - nace4q1: {type: bool, initialdata: False}
            - nace5q1: {type: bool, initialdata: False}
            - nace6q1: {type: bool, initialdata: False}
            - nace7q1: {type: bool, initialdata: False}
            - nace8q1: {type: bool, initialdata: False}
            - nace9q1: {type: bool, initialdata: False}
            - nace10q1: {type: bool, initialdata: False}
            - nace1q2: {type: bool, initialdata: False}
            - nace2q2: {type: bool, initialdata: False}
            - nace3q2: {type: bool, initialdata: False}
            - nace4q2: {type: bool, initialdata: False}
            - nace5q2: {type: bool, initialdata: False}
            - nace6q2: {type: bool, initialdata: False}
            - nace7q2: {type: bool, initialdata: False}
            - nace8q2: {type: bool, initialdata: False}
            - nace9q2: {type: bool, initialdata: False}
            - nace10q2: {type: bool, initialdata: False}
            - nace1q3: {type: bool, initialdata: False}
            - nace2q3: {type: bool, initialdata: False}
            - nace3q3: {type: bool, initialdata: False}
            - nace4q3: {type: bool, initialdata: False}
            - nace5q3: {type: bool, initialdata: False}
            - nace6q3: {type: bool, initialdata: False}
            - nace7q3: {type: bool, initialdata: False}
            - nace8q3: {type: bool, initialdata: False}
            - nace9q3: {type: bool, initialdata: False}
            - nace10q3: {type: bool, initialdata: False}            
            - nace1q4: {type: bool, initialdata: False}
            - nace2q4: {type: bool, initialdata: False}
            - nace3q4: {type: bool, initialdata: False}
            - nace4q4: {type: bool, initialdata: False}
            - nace5q4: {type: bool, initialdata: False}
            - nace6q4: {type: bool, initialdata: False}
            - nace7q4: {type: bool, initialdata: False}
            - nace8q4: {type: bool, initialdata: False}
            - nace9q4: {type: bool, initialdata: False}
            - nace10q4: {type: bool, initialdata: False}   

            - nace1_score: {type: float, initialdata: False}
            - nace2_score: {type: float, initialdata: False}
            - nace3_score: {type: float, initialdata: False}
            - nace4_score: {type: float, initialdata: False}
            - nace5_score: {type: float, initialdata: False}
            - nace6_score: {type: float, initialdata: False}
            - nace7_score: {type: float, initialdata: False}
            - nace8_score: {type: float, initialdata: False}
            - nace9_score: {type: float, initialdata: False}
            - nace10_score: {type: float, initialdata: False}

            - nace1q1_score: {type: float, initialdata: False}
            - nace2q1_score: {type: float, initialdata: False}
            - nace3q1_score: {type: float, initialdata: False}
            - nace4q1_score: {type: float, initialdata: False}
            - nace5q1_score: {type: float, initialdata: False}
            - nace6q1_score: {type: float, initialdata: False}
            - nace7q1_score: {type: float, initialdata: False}
            - nace8q1_score: {type: float, initialdata: False}
            - nace9q1_score: {type: float, initialdata: False}
            - nace10q1_score: {type: float, initialdata: False}
               
            - nace1q2_score: {type: float, initialdata: False}
            - nace2q2_score: {type: float, initialdata: False}
            - nace3q2_score: {type: float, initialdata: False}
            - nace4q2_score: {type: float, initialdata: False}
            - nace5q2_score: {type: float, initialdata: False}
            - nace6q2_score: {type: float, initialdata: False}
            - nace7q2_score: {type: float, initialdata: False}
            - nace8q2_score: {type: float, initialdata: False}
            - nace9q2_score: {type: float, initialdata: False}
            - nace10q2_score: {type: float, initialdata: False}
               
            - nace1q3_score: {type: float, initialdata: False}
            - nace2q3_score: {type: float, initialdata: False}
            - nace3q3_score: {type: float, initialdata: False}
            - nace4q3_score: {type: float, initialdata: False}
            - nace5q3_score: {type: float, initialdata: False}
            - nace6q3_score: {type: float, initialdata: False}
            - nace7q3_score: {type: float, initialdata: False}
            - nace8q3_score: {type: float, initialdata: False}
            - nace9q3_score: {type: float, initialdata: False}
            - nace10q3_score: {type: float, initialdata: False}    

            - nace1q4_score: {type: float, initialdata: False}
            - nace2q4_score: {type: float, initialdata: False}
            - nace3q4_score: {type: float, initialdata: False}
            - nace4q4_score: {type: float, initialdata: False}
            - nace5q4_score: {type: float, initialdata: False}
            - nace6q4_score: {type: float, initialdata: False}
            - nace7q4_score: {type: float, initialdata: False}
            - nace8q4_score: {type: float, initialdata: False}
            - nace9q4_score: {type: float, initialdata: False}
            - nace10q4_score: {type: float, initialdata: False}               
            
            

            
# defining macros            
         macros:
# defining macros from global variables (external table)            
            cou_2_N1q1: countrytable.cou_2_N1q1[period]
            cou_3_N1q1: countrytable.cou_3_N1q1[period]
            cou_4_N1q1: countrytable.cou_4_N1q1[period]
            cou_2_N2q1: countrytable.cou_2_N2q1[period]
            cou_3_N2q1: countrytable.cou_3_N2q1[period]
            cou_4_N2q1: countrytable.cou_4_N2q1[period]
            cou_2_N3q1: countrytable.cou_2_N3q1[period]
            cou_3_N3q1: countrytable.cou_3_N3q1[period]
            cou_4_N3q1: countrytable.cou_4_N3q1[period]
            cou_2_N4q1: countrytable.cou_2_N4q1[period]
            cou_3_N4q1: countrytable.cou_3_N4q1[period]
            cou_4_N4q1: countrytable.cou_4_N4q1[period]
            cou_2_N5q1: countrytable.cou_2_N5q1[period]
            cou_3_N5q1: countrytable.cou_3_N5q1[period]
            cou_4_N5q1: countrytable.cou_4_N5q1[period]
            cou_2_N6q1: countrytable.cou_2_N6q1[period]
            cou_3_N6q1: countrytable.cou_3_N6q1[period]
            cou_4_N6q1: countrytable.cou_4_N6q1[period]
            cou_2_N7q1: countrytable.cou_2_N7q1[period]
            cou_3_N7q1: countrytable.cou_3_N7q1[period]
            cou_4_N7q1: countrytable.cou_4_N7q1[period]
            cou_2_N8q1: countrytable.cou_2_N8q1[period]
            cou_3_N8q1: countrytable.cou_3_N8q1[period]
            cou_4_N8q1: countrytable.cou_4_N8q1[period]
            cou_2_N9q1: countrytable.cou_2_N9q1[period]
            cou_3_N9q1: countrytable.cou_3_N9q1[period]
            cou_4_N9q1: countrytable.cou_4_N9q1[period]
            cou_2_N10q1: countrytable.cou_2_N10q1[period]
            cou_3_N10q1: countrytable.cou_3_N10q1[period]
            cou_4_N10q1: countrytable.cou_4_N10q1[period]
            
            cou_2_N1q2: countrytable.cou_2_N1q2[period]
            cou_3_N1q2: countrytable.cou_3_N1q2[period]
            cou_4_N1q2: countrytable.cou_4_N1q2[period]
            cou_2_N2q2: countrytable.cou_2_N2q2[period]
            cou_3_N2q2: countrytable.cou_3_N2q2[period]
            cou_4_N2q2: countrytable.cou_4_N2q2[period]
            cou_2_N3q2: countrytable.cou_2_N3q2[period]
            cou_3_N3q2: countrytable.cou_3_N3q2[period]
            cou_4_N3q2: countrytable.cou_4_N3q2[period]
            cou_2_N4q2: countrytable.cou_2_N4q2[period]
            cou_3_N4q2: countrytable.cou_3_N4q2[period]
            cou_4_N4q2: countrytable.cou_4_N4q2[period]
            cou_2_N5q2: countrytable.cou_2_N5q2[period]
            cou_3_N5q2: countrytable.cou_3_N5q2[period]
            cou_4_N5q2: countrytable.cou_4_N5q2[period]
            cou_2_N6q2: countrytable.cou_2_N6q2[period]
            cou_3_N6q2: countrytable.cou_3_N6q2[period]
            cou_4_N6q2: countrytable.cou_4_N6q2[period]
            cou_2_N7q2: countrytable.cou_2_N7q2[period]
            cou_3_N7q2: countrytable.cou_3_N7q2[period]
            cou_4_N7q2: countrytable.cou_4_N7q2[period]
            cou_2_N8q2: countrytable.cou_2_N8q2[period]
            cou_3_N8q2: countrytable.cou_3_N8q2[period]
            cou_4_N8q2: countrytable.cou_4_N8q2[period]
            cou_2_N9q2: countrytable.cou_2_N9q2[period]
            cou_3_N9q2: countrytable.cou_3_N9q2[period]
            cou_4_N9q2: countrytable.cou_4_N9q2[period]
            cou_2_N10q2: countrytable.cou_2_N10q2[period]
            cou_3_N10q2: countrytable.cou_3_N10q2[period]
            cou_4_N10q2: countrytable.cou_4_N10q2[period]

            cou_2_N1q3: countrytable.cou_2_N1q3[period]
            cou_3_N1q3: countrytable.cou_3_N1q3[period]
            cou_4_N1q3: countrytable.cou_4_N1q3[period]
            cou_2_N2q3: countrytable.cou_2_N2q3[period]
            cou_3_N2q3: countrytable.cou_3_N2q3[period]
            cou_4_N2q3: countrytable.cou_4_N2q3[period]
            cou_2_N3q3: countrytable.cou_2_N3q3[period]
            cou_3_N3q3: countrytable.cou_3_N3q3[period]
            cou_4_N3q3: countrytable.cou_4_N3q3[period]
            cou_2_N4q3: countrytable.cou_2_N4q3[period]
            cou_3_N4q3: countrytable.cou_3_N4q3[period]
            cou_4_N4q3: countrytable.cou_4_N4q3[period]
            cou_2_N5q3: countrytable.cou_2_N5q3[period]
            cou_3_N5q3: countrytable.cou_3_N5q3[period]
            cou_4_N5q3: countrytable.cou_4_N5q3[period]
            cou_2_N6q3: countrytable.cou_2_N6q3[period]
            cou_3_N6q3: countrytable.cou_3_N6q3[period]
            cou_4_N6q3: countrytable.cou_4_N6q3[period]
            cou_2_N7q3: countrytable.cou_2_N7q3[period]
            cou_3_N7q3: countrytable.cou_3_N7q3[period]
            cou_4_N7q3: countrytable.cou_4_N7q3[period]
            cou_2_N8q3: countrytable.cou_2_N8q3[period]
            cou_3_N8q3: countrytable.cou_3_N8q3[period]
            cou_4_N8q3: countrytable.cou_4_N8q3[period]
            cou_2_N9q3: countrytable.cou_2_N9q3[period]
            cou_3_N9q3: countrytable.cou_3_N9q3[period]
            cou_4_N9q3: countrytable.cou_4_N9q3[period]
            cou_2_N10q3: countrytable.cou_2_N10q3[period]
            cou_3_N10q3: countrytable.cou_3_N10q3[period]
            cou_4_N10q3: countrytable.cou_4_N10q3[period]

            cou_2_N1q4: countrytable.cou_2_N1q4[period]
            cou_3_N1q4: countrytable.cou_3_N1q4[period]
            cou_4_N1q4: countrytable.cou_4_N1q4[period]
            cou_2_N2q4: countrytable.cou_2_N2q4[period]
            cou_3_N2q4: countrytable.cou_3_N2q4[period]
            cou_4_N2q4: countrytable.cou_4_N2q4[period]
            cou_2_N3q4: countrytable.cou_2_N3q4[period]
            cou_3_N3q4: countrytable.cou_3_N3q4[period]
            cou_4_N3q4: countrytable.cou_4_N3q4[period]
            cou_2_N4q4: countrytable.cou_2_N4q4[period]
            cou_3_N4q4: countrytable.cou_3_N4q4[period]
            cou_4_N4q4: countrytable.cou_4_N4q4[period]
            cou_2_N5q4: countrytable.cou_2_N5q4[period]
            cou_3_N5q4: countrytable.cou_3_N5q4[period]
            cou_4_N5q4: countrytable.cou_4_N5q4[period]
            cou_2_N6q4: countrytable.cou_2_N6q4[period]
            cou_3_N6q4: countrytable.cou_3_N6q4[period]
            cou_4_N6q4: countrytable.cou_4_N6q4[period]
            cou_2_N7q4: countrytable.cou_2_N7q4[period]
            cou_3_N7q4: countrytable.cou_3_N7q4[period]
            cou_4_N7q4: countrytable.cou_4_N7q4[period]
            cou_2_N8q4: countrytable.cou_2_N8q4[period]
            cou_3_N8q4: countrytable.cou_3_N8q4[period]
            cou_4_N8q4: countrytable.cou_4_N8q4[period]
            cou_2_N9q4: countrytable.cou_2_N9q4[period]
            cou_3_N9q4: countrytable.cou_3_N9q4[period]
            cou_4_N9q4: countrytable.cou_4_N9q4[period]
            cou_2_N10q4: countrytable.cou_2_N10q4[period]
            cou_3_N10q4: countrytable.cou_3_N10q4[period]
            cou_4_N10q4: countrytable.cou_4_N10q4[period]
            
# defining macros             
            SLOVAKIA: 1
            EU: 2
            OtherEU: 3
            WORLD: 4

         processes: 
            function_nace():
               - nace1q1: if(immigrant_sim2, False , nace1q1)
               - nace2q1: if(immigrant_sim2, False , nace2q1)
               - nace3q1: if(immigrant_sim2, False , nace3q1)
               - nace4q1: if(immigrant_sim2, False , nace4q1)
               - nace5q1: if(immigrant_sim2, False , nace5q1)
               - nace6q1: if(immigrant_sim2, False , nace6q1)
               - nace7q1: if(immigrant_sim2, False , nace7q1)
               - nace8q1: if(immigrant_sim2, False , nace8q1)
               - nace9q1: if(immigrant_sim2, False , nace9q1)
               - nace10q1: if(immigrant_sim2, False , nace10q1)
               - nace1q2: if(immigrant_sim2, False , nace1q2)
               - nace2q2: if(immigrant_sim2, False , nace2q2)
               - nace3q2: if(immigrant_sim2, False , nace3q2)
               - nace4q2: if(immigrant_sim2, False , nace4q2)
               - nace5q2: if(immigrant_sim2, False , nace5q2)
               - nace6q2: if(immigrant_sim2, False , nace6q2)
               - nace7q2: if(immigrant_sim2, False , nace7q2)
               - nace8q2: if(immigrant_sim2, False , nace8q2)
               - nace9q2: if(immigrant_sim2, False , nace9q2)
               - nace10q2: if(immigrant_sim2, False , nace10q2)
               - nace1q3: if(immigrant_sim2, False , nace1q3)
               - nace2q3: if(immigrant_sim2, False , nace2q3)
               - nace3q3: if(immigrant_sim2, False , nace3q3)
               - nace4q3: if(immigrant_sim2, False , nace4q3)
               - nace5q3: if(immigrant_sim2, False , nace5q3)
               - nace6q3: if(immigrant_sim2, False , nace6q3)
               - nace7q3: if(immigrant_sim2, False , nace7q3)
               - nace8q3: if(immigrant_sim2, False , nace8q3)
               - nace9q3: if(immigrant_sim2, False , nace9q3)
               - nace10q3: if(immigrant_sim2, False , nace10q3)
               - nace1q4: if(immigrant_sim2, False , nace1q4)
               - nace2q4: if(immigrant_sim2, False , nace2q4)
               - nace3q4: if(immigrant_sim2, False , nace3q4)
               - nace4q4: if(immigrant_sim2, False , nace4q4)
               - nace5q4: if(immigrant_sim2, False , nace5q4)
               - nace6q4: if(immigrant_sim2, False , nace6q4)
               - nace7q4: if(immigrant_sim2, False , nace7q4)
               - nace8q4: if(immigrant_sim2, False , nace8q4)
               - nace9q4: if(immigrant_sim2, False , nace9q4)
               - nace10q4: if(immigrant_sim2, False , nace10q4)
               
               
            status1():
               - status: status                
               
            employment():            
               - nace: if(not ea, -1, nace)
               - qual: if(not ea, -1, qual)                                   
               - employed: False                                     

                          
#    Sorting sectors according to average income from national accounts : average monthly Compensation of employees			
#		value	nace10	average 
#			
#		4	ENERGY	                1775.020178
#		7	MAR_SERVICES_2      	1744.52832
#		2	MINING	                1551.261406
#		9	NMAR_SERVICES       	1442.689344
#		3	INDUSTRY	            1322.295555
#		6	MAR_SERVICES_1      	1060.132054
#		8	PROF_AND_ADM_SERVICES	1014.702438
#		10	OTHER	                832.8613235
#		1	AGRO	                785.38497
#		5	CONSTRUCTION	        744.5053326
#		
# nace10:                4  7  2  9  3  6  8  10  1  5 
# When computing nace5_score, take into account sex, region, nace_1y, ...
# logit ENERGY ISFEMALE PRIMARY LOWER_SECONDARY UPPER_SECONDARY POST_SECONDARY FIELD1 FIELD2 FIELD3 FIELD4 FIELD5 FIELD6 FIELD7 FIELD8 FIELD10 AGEG22 AGEG27 AGEG32 AGEG37 AGEG42 AGEG47 AGEG52 AGEG57 AGEG62, iter(10)
# logit MAR_SERVICES_2 ISFEMALE PRIMARY LOWER_SECONDARY UPPER_SECONDARY POST_SECONDARY FIELD1 FIELD2 FIELD3 FIELD4 FIELD5 FIELD6 FIELD7 FIELD8 FIELD9 FIELD10 AGEG22 AGEG27 AGEG32 AGEG37 AGEG42 AGEG47 AGEG52 AGEG57 AGEG62, iter(10)
# logit MINING ISFEMALE PRIMARY LOWER_SECONDARY UPPER_SECONDARY FIELD4 FIELD7 FIELD8 FIELD9 FIELD10 AGEG22 AGEG27 AGEG32 AGEG37 AGEG42 AGEG47 AGEG52 AGEG57, iter(10)
# logit NMAR_SERVICES ISFEMALE PRIMARY LOWER_SECONDARY UPPER_SECONDARY POST_SECONDARY FIELD1 FIELD2 FIELD3 FIELD4 FIELD5 FIELD6 FIELD7 FIELD8 FIELD9 FIELD10 AGEG22 AGEG27 AGEG32 AGEG37 AGEG42 AGEG47 AGEG52 AGEG57 AGEG62, iter(10)
# logit INDUSTRY ISFEMALE PRIMARY LOWER_SECONDARY UPPER_SECONDARY POST_SECONDARY FIELD1 FIELD2 FIELD3 FIELD4 FIELD5 FIELD6 FIELD7 FIELD8 FIELD9 FIELD10 AGEG22 AGEG27 AGEG32 AGEG37 AGEG42 AGEG47 AGEG52 AGEG57 AGEG62, iter(10)
# logit MAR_SERVICES_1 ISFEMALE PRIMARY LOWER_SECONDARY UPPER_SECONDARY POST_SECONDARY FIELD1 FIELD2 FIELD3 FIELD4 FIELD5 FIELD6 FIELD7 FIELD8 FIELD9 FIELD10 AGEG22 AGEG27 AGEG32 AGEG37 AGEG42 AGEG47 AGEG52 AGEG57 AGEG62, iter(10)
# logit PROF_AND_ADM_SERVICES ISFEMALE PRIMARY LOWER_SECONDARY UPPER_SECONDARY POST_SECONDARY FIELD1 FIELD2 FIELD3 FIELD4 FIELD5 FIELD6 FIELD7 FIELD8 FIELD9 FIELD10 AGEG17 AGEG22 AGEG27 AGEG32 AGEG37 AGEG42 AGEG47 AGEG52 AGEG57 AGEG62, iter(10)
# logit OTHER ISFEMALE PRIMARY LOWER_SECONDARY UPPER_SECONDARY POST_SECONDARY FIELD1 FIELD2 FIELD3 FIELD4 FIELD5 FIELD6 FIELD7 FIELD8 FIELD9 FIELD10 AGEG22 AGEG27 AGEG32 AGEG37 AGEG42 AGEG47 AGEG52 AGEG57 AGEG62, iter(10)
# logit AGRO ISFEMALE PRIMARY LOWER_SECONDARY UPPER_SECONDARY POST_SECONDARY FIELD1 FIELD2 FIELD3 FIELD4 FIELD5 FIELD6 FIELD7 FIELD8 FIELD9 FIELD10 AGEG17 AGEG22 AGEG27 AGEG32 AGEG37 AGEG42 AGEG47 AGEG52 AGEG57 AGEG62, iter(10)
# logit CONSTRUCTION ISFEMALE PRIMARY LOWER_SECONDARY UPPER_SECONDARY POST_SECONDARY FIELD0 FIELD1 FIELD2 FIELD3 FIELD4 FIELD5 FIELD6 FIELD7 FIELD8 FIELD9 FIELD10 AGEG17 AGEG22 AGEG27 AGEG32 AGEG37 AGEG42 AGEG47 AGEG52 AGEG57 AGEG62, iter(10)

####################################################################
##  In the first step sectoral score is calculated for all the economically active individuals. The scores present the product of a logit equation estimating the probability of 
##  being employed in that particular sector. This is regressed on gender, level of education, field of education, and age group. In the second step, estimated scores are 
##  increased with the increment of +1 for those working in the sector during the previous period. For those assigned as working retired during the previous period an increment 
##  of +0.6 is used. In the final step those working in the particular sector at a particular qualification level receive a bonus of 0.3, generating a segment specific score. 
##  Following this procedure we gain in total 40, segment specific scores.
####################################################################

            employment_nace_score():
               - nace4_score: if(ea, logit_score(ISFEMALE*(-1.430955)+PRIMARY*(-0.6080604)+LOWER_SECONDARY*(-0.2750176)+UPPER_SECONDARY*(0.0882677)+POST_SECONDARY*(-1.631308)+FIELD1*(-0.5017261)+FIELD2*(-0.2051944)+FIELD4*(0.7439015)+FIELD5*(0.4524001)+FIELD7*(0.7801113)+FIELD8*(1.186617)+FIELD9*(-2.06538)+FIELD10*(-0.948304)+AGEG22*(2.39238)+AGEG27*(2.76036)+AGEG32*(2.755815)+AGEG37*(3.332376)+AGEG42*(3.934609)+AGEG47*(4.508906)+AGEG52*(4.293329)+AGEG57*(4.349512)+AGEG62*(3.590546)+1*(-7.385498)),0)
               - nace7_score: if(ea, logit_score(ISFEMALE*(-0.4962023)+PRIMARY*(-4.244369)+LOWER_SECONDARY*(-2.905605)+UPPER_SECONDARY*(-1.277747)+POST_SECONDARY*(-1.318786)+FIELD1*(-1.988767)+FIELD2*(-0.9577948)+FIELD3*(0.1882248)+FIELD4*(0.0500701)+FIELD5*(-0.0938224)+FIELD6*(1.795711)+FIELD7*(-0.3342824)+FIELD8*(-1.977732)+FIELD9*(-1.835778)+FIELD10*(-0.4849712)+AGEG22*(2.072198)+AGEG27*(2.770846)+AGEG32*(2.879858)+AGEG37*(2.727218)+AGEG42*(2.545494)+AGEG47*(2.348776)+AGEG52*(2.565034)+AGEG57*(2.25526)+AGEG62*(1.702445)+1*(-4.379223)),0)
               - nace2_score: if(ea, logit_score(ISFEMALE*(-1.778937)+PRIMARY*(-1.073789)+LOWER_SECONDARY*(0.8522716)+UPPER_SECONDARY*(0.6020455)+FIELD2*(2.461971)+FIELD4*(1.456421)+FIELD5*(1.937282)+FIELD7*(1.335384)+AGEG22*(-0.5067744)+AGEG27*(0.3818112)+AGEG32*(1.528561)+AGEG37*(1.865491)+AGEG42*(1.329505)+AGEG47*(2.460863)+AGEG52*(2.543295)+AGEG57*(2.531646)+AGEG62*(1.011981)+1*(-7.793427)),0)
               - nace9_score: if(ea, logit_score(ISFEMALE*(0.8906526)+PRIMARY*(-1.342952)+LOWER_SECONDARY*(-1.55135)+UPPER_SECONDARY*(-0.9222203)+POST_SECONDARY*(-0.3861074)+FIELD1*(1.336919)+FIELD2*(-0.1808903)+FIELD3*(-0.4780594)+FIELD4*(-0.516797)+FIELD5*(-0.1596197)+FIELD6*(-0.8010889)+FIELD7*(-0.4327934)+FIELD8*(-0.3366427)+FIELD9*(1.357613)+FIELD10*(0.0316525)+AGEG22*(1.791457)+AGEG27*(2.586978)+AGEG32*(2.688857)+AGEG37*(3.118333)+AGEG42*(3.476648)+AGEG47*(3.582639)+AGEG52*(3.676296)+AGEG57*(3.693225)+AGEG62*(2.705901)+1*(-4.484858)),0)
               - nace3_score: if(ea, logit_score(ISFEMALE*(-0.6161932)+PRIMARY*(0.1131633)+LOWER_SECONDARY*(0.9687797)+UPPER_SECONDARY*(0.7949815)+POST_SECONDARY*(0.8051323)+FIELD1*(-1.325668)+FIELD2*(-0.327695)+FIELD3*(0.2868797)+FIELD4*(0.2954259)+FIELD5*(0.3707131)+FIELD6*(0.0705435)+FIELD7*(0.9622798)+FIELD8*(0.6189335)+FIELD9*(-0.6977375)+FIELD10*(0.3426376)+AGEG22*(3.059163)+AGEG27*(3.48108)+AGEG32*(3.618588)+AGEG37*(3.947006)+AGEG42*(4.03986)+AGEG47*(3.912136)+AGEG52*(3.79615)+AGEG57*(3.675411)+AGEG62*(2.487418)+1*(-5.684966)),0)
               - nace6_score: if(ea, logit_score(ISFEMALE*(0.0113688)+PRIMARY*(-0.5998524)+LOWER_SECONDARY*(0.7281282)+UPPER_SECONDARY*(0.9121332)+POST_SECONDARY*(0.5920367)+FIELD1*(-0.4333733)+FIELD2*(0.1728674)+FIELD3*(0.4283757)+FIELD4*(0.3159932)+FIELD5*(-0.0701904)+FIELD6*(-0.3969948)+FIELD7*(0.1060821)+FIELD8*(0.2088362)+FIELD9*(0.070619)+FIELD10*(0.7679135)+AGEG22*(2.600157)+AGEG27*(3.061053)+AGEG32*(2.860256)+AGEG37*(3.139882)+AGEG42*(3.274922)+AGEG47*(3.240913)+AGEG52*(3.089536)+AGEG57*(2.900854)+AGEG62*(1.888614)+1*(-5.228656)),0)
               - nace8_score: if(ea, logit_score(ISFEMALE*(0.0256982)+PRIMARY*(-1.847318)+LOWER_SECONDARY*(-1.456828)+UPPER_SECONDARY*(-0.8900539)+POST_SECONDARY*(-1.139038)+FIELD1*(-1.647072)+FIELD2*(0.4885236)+FIELD3*(0.3447637)+FIELD4*(0.6287291)+FIELD5*(0.3732971)+FIELD6*(-0.3517591)+FIELD7*(-0.4706851)+FIELD8*(-0.3259343)+FIELD9*(-1.581247)+FIELD10*(-0.2157682)+AGEG17*(0.640868)+AGEG22*(1.625115)+AGEG27*(2.457741)+AGEG32*(2.571957)+AGEG37*(2.459263)+AGEG42*(2.396677)+AGEG47*(2.455543)+AGEG52*(2.533927)+AGEG57*(2.454433)+AGEG62*(2.028309)+1*(-4.801171)),0)
               - nace10_score: if(ea, logit_score(ISFEMALE*(0.280901)+PRIMARY*(-1.256909)+LOWER_SECONDARY*(-0.2461955)+UPPER_SECONDARY*(0.0214921)+POST_SECONDARY*(0.8228255)+FIELD1*(-0.0053273)+FIELD2*(1.944678)+FIELD3*(-0.1969974)+FIELD4*(0.4217175)+FIELD5*(0.8596559)+FIELD6*(0.9806178)+FIELD7*(-0.336339)+FIELD8*(-0.4699373)+FIELD9*(-0.3140344)+FIELD10*(1.406307)+AGEG22*(1.49673)+AGEG27*(1.233676)+AGEG32*(1.868414)+AGEG37*(1.974567)+AGEG42*(2.020097)+AGEG47*(2.179447)+AGEG52*(1.91941)+AGEG57*(2.028313)+AGEG62*(1.107426)+1*(-5.898932)),0)
               - nace1_score: if(ea, logit_score(ISFEMALE*(-1.145707)+PRIMARY*(0.1058418)+LOWER_SECONDARY*(0.5142037)+UPPER_SECONDARY*(0.3958098)+POST_SECONDARY*(-0.1234515)+FIELD1*(-0.5210291)+FIELD3*(0.0288287)+FIELD4*(0.2252975)+FIELD5*(0.925604)+FIELD7*(0.5685787)+FIELD8*(3.368157)+FIELD10*(-0.3794793)+AGEG22*(1.309653)+AGEG27*(1.82583)+AGEG32*(1.593315)+AGEG37*(2.707394)+AGEG42*(2.852158)+AGEG47*(3.322546)+AGEG52*(3.331159)+AGEG57*(3.351099)+AGEG62*(2.802569)+1*(-6.940702)),0)
               - nace5_score: if(ea, logit_score(ISFEMALE*(-2.547043)+PRIMARY*(0.0471243)+LOWER_SECONDARY*(0.8928844)+UPPER_SECONDARY*(0.535184)+POST_SECONDARY*(0.4751715)+FIELD0*(-0.1381159)+FIELD1*(-0.4190899)+FIELD2*(-0.364662)+FIELD3*(-0.0010815)+FIELD4*(-0.1084254)+FIELD5*(-0.0042587)+FIELD6*(-1.135709)+FIELD7*(0.8051176)+FIELD8*(-0.3812379)+FIELD9*(-2.762848)+AGEG17*(1.674312)+AGEG22*(3.001323)+AGEG27*(3.511433)+AGEG32*(3.487774)+AGEG37*(4.060241)+AGEG42*(3.94062)+AGEG47*(4.014938)+AGEG52*(3.893614)+AGEG57*(3.815666)+AGEG62*(2.903962)+1*(-6.199941)),0)
               
               - nace4_score: nace4_score + 1                  
               - nace7_score: nace7_score + 1   
               - nace2_score: nace2_score + 1   
               - nace9_score: nace9_score + 1   
               - nace3_score: nace3_score + 1   
               - nace6_score: nace6_score + 1            
               - nace8_score: nace8_score + 1     
               - nace10_score: nace10_score + 1                  
               - nace1_score: nace1_score + 1  
               - nace5_score: nace5_score + 1           
               
               
               - nace4_score: if(working_retired==True and nace1y==4, nace4_score+0.6, nace4_score)
               - nace4_score: if(working_retired==True, nace4_score+0.6, nace4_score)               
               - nace7_score: if(working_retired==True and nace1y==7, nace7_score+0.6, nace7_score)
               - nace7_score: if(working_retired==True, nace7_score+0.6, nace7_score)      
               - nace2_score: if(working_retired==True and nace1y==2, nace2_score+0.6, nace2_score)
               - nace2_score: if(working_retired==True, nace2_score+0.6, nace2_score)
               - nace9_score: if(working_retired==True and nace1y==9, nace9_score+0.6, nace9_score)
               - nace9_score: if(working_retired==True, nace9_score+0.6, nace9_score)    
               - nace3_score: if(working_retired==True and nace1y==3, nace3_score+0.6, nace3_score)
               - nace3_score: if(working_retired==True, nace3_score+0.6, nace3_score)
               - nace6_score: if(working_retired==True and nace1y==6, nace6_score+0.6, nace6_score)
               - nace6_score: if(working_retired==True, nace6_score+0.6, nace6_score) 
               - nace8_score: if(working_retired==True and nace1y==8, nace8_score+0.6, nace8_score)
               - nace8_score: if(working_retired==True, nace8_score+0.6, nace8_score) 
               - nace10_score: if(working_retired==True and nace1y==10, nace10_score+0.6, nace10_score)
               - nace10_score: if(working_retired==True , nace10_score+0.6, nace10_score)
               - nace1_score: if(working_retired==True and nace1y==1, nace1_score+0.6, nace1_score)
               - nace1_score: if(working_retired==True, nace1_score+0.6, nace1_score)
               - nace5_score: if(working_retired==True and nace1y==5, nace5_score+0.6, nace5_score)        
               - nace5_score: if(working_retired==True , nace5_score+0.6, nace5_score)   

#nace skore
               - nace1q1_score: if(nace1y==1 and qual1y==1 , nace1_score+0.3, nace1_score)
               - nace2q1_score: if(nace1y==2 and qual1y==1 , nace2_score+0.3, nace2_score)
               - nace3q1_score: if(nace1y==3 and qual1y==1 , nace3_score+0.3, nace3_score)
               - nace4q1_score: if(nace1y==4 and qual1y==1 , nace4_score+0.3, nace4_score)
               - nace5q1_score: if(nace1y==5 and qual1y==1 , nace5_score+0.3, nace5_score)
               - nace6q1_score: if(nace1y==6 and qual1y==1 , nace6_score+0.3, nace6_score)
               - nace7q1_score: if(nace1y==7 and qual1y==1 , nace7_score+0.3, nace7_score)
               - nace8q1_score: if(nace1y==8 and qual1y==1 , nace8_score+0.3, nace8_score)
               - nace9q1_score: if(nace1y==9 and qual1y==1 , nace9_score+0.3, nace9_score)
               - nace10q1_score: if(nace1y==10 and qual1y==1 , nace10_score+0.3, nace10_score)
               
               - nace1q2_score: if(nace1y==1 and qual1y==2 , nace1_score+0.3, nace1_score)
               - nace2q2_score: if(nace1y==2 and qual1y==2 , nace2_score+0.3, nace2_score)
               - nace3q2_score: if(nace1y==3 and qual1y==2 , nace3_score+0.3, nace3_score)
               - nace4q2_score: if(nace1y==4 and qual1y==2 , nace4_score+0.3, nace4_score)
               - nace5q2_score: if(nace1y==5 and qual1y==2 , nace5_score+0.3, nace5_score)
               - nace6q2_score: if(nace1y==6 and qual1y==2 , nace6_score+0.3, nace6_score)
               - nace7q2_score: if(nace1y==7 and qual1y==2 , nace7_score+0.3, nace7_score)
               - nace8q2_score: if(nace1y==8 and qual1y==2 , nace8_score+0.3, nace8_score)
               - nace9q2_score: if(nace1y==9 and qual1y==2 , nace9_score+0.3, nace9_score)
               - nace10q2_score: if(nace1y==10 and qual1y==2 , nace10_score+0.3, nace10_score)
               
               - nace1q3_score: if(nace1y==1 and qual1y==3 , nace1_score+0.3, nace1_score)
               - nace2q3_score: if(nace1y==2 and qual1y==3 , nace2_score+0.3, nace2_score)
               - nace3q3_score: if(nace1y==3 and qual1y==3 , nace3_score+0.3, nace3_score)
               - nace4q3_score: if(nace1y==4 and qual1y==3 , nace4_score+0.3, nace4_score)
               - nace5q3_score: if(nace1y==5 and qual1y==3 , nace5_score+0.3, nace5_score)
               - nace6q3_score: if(nace1y==6 and qual1y==3 , nace6_score+0.3, nace6_score)
               - nace7q3_score: if(nace1y==7 and qual1y==3 , nace7_score+0.3, nace7_score)
               - nace8q3_score: if(nace1y==8 and qual1y==3 , nace8_score+0.3, nace8_score)
               - nace9q3_score: if(nace1y==9 and qual1y==3 , nace9_score+0.3, nace9_score)
               - nace10q3_score: if(nace1y==10 and qual1y==3 , nace10_score+0.3, nace10_score)
               
               - nace1q4_score: if(nace1y==1 and qual1y==4 , nace1_score+0.3, nace1_score)
               - nace2q4_score: if(nace1y==2 and qual1y==4 , nace2_score+0.3, nace2_score)
               - nace3q4_score: if(nace1y==3 and qual1y==4 , nace3_score+0.3, nace3_score)
               - nace4q4_score: if(nace1y==4 and qual1y==4 , nace4_score+0.3, nace4_score)
               - nace5q4_score: if(nace1y==5 and qual1y==4 , nace5_score+0.3, nace5_score)
               - nace6q4_score: if(nace1y==6 and qual1y==4 , nace6_score+0.3, nace6_score)
               - nace7q4_score: if(nace1y==7 and qual1y==4 , nace7_score+0.3, nace7_score)
               - nace8q4_score: if(nace1y==8 and qual1y==4 , nace8_score+0.3, nace8_score)
               - nace9q4_score: if(nace1y==9 and qual1y==4 , nace9_score+0.3, nace9_score)
               - nace10q4_score: if(nace1y==10 and qual1y==4 , nace10_score+0.3, nace10_score)
              

# creating of naceq (probability)
               - nace1q1: False
               - nace2q1: False
               - nace3q1: False
               - nace4q1: False
               - nace5q1: False
               - nace6q1: False
               - nace7q1: False
               - nace8q1: False
               - nace9q1: False
               - nace10q1: False
               - nace1q2: False
               - nace2q2: False
               - nace3q2: False
               - nace4q2: False
               - nace5q2: False
               - nace6q2: False
               - nace7q2: False
               - nace8q2: False
               - nace9q2: False
               - nace10q2: False
               - nace1q3: False
               - nace2q3: False
               - nace3q3: False
               - nace4q3: False
               - nace5q3: False
               - nace6q3: False
               - nace7q3: False
               - nace8q3: False
               - nace9q3: False
               - nace10q3: False
               - nace1q4: False
               - nace2q4: False
               - nace3q4: False
               - nace4q4: False
               - nace5q4: False
               - nace6q4: False
               - nace7q4: False
               - nace8q4: False
               - nace9q4: False
               - nace10q4: False

####################################################################
##  Thanks to this process individuals keep they job from their previous period, in case employment in their segment in not declining in absolute terms. This means that 
##  employment in the previous period minus replacement demand is not smaller bigger than employment in the current period. 
####################################################################
               
            employment_old():               
################################### Q1  
# Nace 4               
               - nace4q1: if(ea and not employed, align_abs(nace4q1_score, N4q1, filter=nace1y==4 and qual1y==1),False)
               - employed: if(nace4q1,True, employed)   
# Nace 7
               - nace7q1: if(ea and not employed, align_abs(nace7q1_score, N7q1, filter=nace1y==7 and qual1y==7),False)
               - employed: if(nace7q1,True, employed)
# Nace 2
               - nace2q1: if(ea and not employed, align_abs(nace2q1_score, N2q1, filter=nace1y==2 and qual1y==1),False)
               - employed: if(nace2q1,True, employed) 
# Nace 9  
               - nace9q1: if(ea and not employed, align_abs(nace9q1_score, N9q1, filter=nace1y==9 and qual1y==1),False)
               - employed: if(nace9q1,True, employed)               
# Nace 3               
               - nace3q1: if(ea and not employed, align_abs(nace3q1_score, N3q1, filter=nace1y==3 and qual1y==1),False)
               - employed: if(nace3q1,True, employed)                 
# Nace 6               
               - nace6q1: if(ea and not employed, align_abs(nace6q1_score, N6q1, filter=nace1y==6 and qual1y==1),False)
               - employed: if(nace6q1,True, employed)   
# Nace 8                
               - nace8q1: if(ea and not employed, align_abs(nace8q1_score, N8q1, filter=nace1y==8 and qual1y==1),False)
               - employed: if(nace8q1,True, employed)
# Nace 10              
               - nace10q1: if(ea and not employed, align_abs(nace10q1_score, N10q1, filter=nace1y==10 and qual1y==1),False)
               - employed: if(nace10q1,True, employed)               
# Nace 1
               - nace1q1: if(ea and not employed, align_abs(nace1q1_score, N1q1, filter=nace1y==1 and qual1y==1),False)
               - employed: if(nace1q1,True, employed)               
# Nace 5
               - nace5q1: if(ea and not employed, align_abs(nace5q1_score, N5q1, filter=nace1y==5 and qual1y==1),False)
               - employed: if(nace5q1,True, employed)            
             
################################### Q2               
# Nace 4               
               - nace4q2: if(ea and not employed, align_abs(nace4q2_score, N4q2, filter=nace1y==4 and qual1y==2),False)
               - employed: if(nace4q2,True, employed)  
# Nace 7
               - nace7q2: if(ea and not employed, align_abs(nace7q2_score, N7q2, filter=nace1y==7 and qual1y==2),False)
               - employed: if(nace7q2,True, employed)
# Nace 2
               - nace2q2: if(ea and not employed, align_abs(nace2q2_score, N2q2, filter=nace1y==2 and qual1y==2),False)
               - employed: if(nace2q2,True, employed)
# Nace 9  
               - nace9q2: if(ea and not employed, align_abs(nace9q2_score, N9q2, filter=nace1y==9 and qual1y==2),False)
               - employed: if(nace9q2,True, employed)  
# Nace 3               
               - nace3q2: if(ea and not employed, align_abs(nace3q2_score, N3q2, filter=nace1y==3 and qual1y==2),False)
               - employed: if(nace3q2,True, employed)                
# Nace 6               
               - nace6q2: if(ea and not employed, align_abs(nace6q2_score, N6q2, filter=nace1y==6 and qual1y==2),False)
               - employed: if(nace6q2,True, employed)    
# Nace 8
               - nace8q2: if(ea and not employed, align_abs(nace8q2_score, N8q2, filter=nace1y==8 and qual1y==2),False)
               - employed: if(nace8q2,True, employed)
# Nace 10              
               - nace10q2: if(ea and not employed, align_abs(nace10q2_score, N10q2, filter=nace1y==10 and qual1y==2),False)
               - employed: if(nace10q2,True, employed) 
# Nace 1
               - nace1q2: if(ea and not employed, align_abs(nace1q2_score, N1q2, filter=nace1y==1 and qual1y==2),False)
               - employed: if(nace1q2,True, employed)                 
# Nace 5
               - nace5q2: if(ea and not employed, align_abs(nace5q2_score, N5q2, filter=nace1y==5 and qual1y==2),False)
               - employed: if(nace5q2,True, employed)

################################### Q3
# Nace 4               
               - nace4q3: if(ea and not employed, align_abs(nace4q3_score, N4q3, filter=nace1y==4 and qual1y==3),False)
               - employed: if(nace4q3,True, employed)   
# Nace 7
               - nace7q3: if(ea and not employed, align_abs(nace7q3_score, N7q3, filter=nace1y==7 and qual1y==3),False)
               - employed: if(nace7q3,True, employed)
# Nace 2
               - nace2q3: if(ea and not employed, align_abs(nace2q3_score, N2q3, filter=nace1y==2 and qual1y==3),False)
               - employed: if(nace2q3,True, employed)
# Nace 9  
               - nace9q3: if(ea and not employed, align_abs(nace9q3_score, N9q3, filter=nace1y==9 and qual1y==3),False)
               - employed: if(nace9q3,True, employed) 
# Nace 3               
               - nace3q3: if(ea and not employed, align_abs(nace3q3_score, N3q3, filter=nace1y==3 and qual1y==3),False)
               - employed: if(nace3q3,True, employed)  
# Nace 6               
               - nace6q3: if(ea and not employed, align_abs(nace6q3_score, N6q3, filter=nace1y==6 and qual1y==3),False)
               - employed: if(nace6q3,True, employed)    
# Nace 8
               - nace8q3: if(ea and not employed, align_abs(nace8q3_score, N8q3, filter=nace1y==8 and qual1y==3),False)
               - employed: if(nace8q3,True, employed)
# Nace 10              
               - nace10q3: if(ea and not employed, align_abs(nace10q3_score, N10q3, filter=nace1y==10 and qual1y==3),False)
               - employed: if(nace10q3,True, employed)  
# Nace 1
               - nace1q3: if(ea and not employed, align_abs(nace1q3_score, N1q3, filter=nace1y==1 and qual1y==3),False)
               - employed: if(nace1q3,True, employed)                  
# Nace 5
               - nace5q3: if(ea and not employed, align_abs(nace5q3_score, N5q3, filter=nace1y==5 and qual1y==3),False)
               - employed: if(nace5q3,True, employed)

               
################################### Q4
# Nace 4               
               - nace4q4: if(ea and not employed, align_abs(nace4q4_score, N4q4, filter=nace1y==4 and qual1y==4),False)
               - employed: if(nace4q4,True, employed)   
# Nace 7
               - nace7q4: if(ea and not employed, align_abs(nace7q4_score, N7q4, filter=nace1y==7 and qual1y==4),False)
               - employed: if(nace7q4,True, employed)
# Nace 2
               - nace2q4: if(ea and not employed, align_abs(nace2q4_score, N2q4, filter=nace1y==2 and qual1y==4),False)
               - employed: if(nace2q4,True, employed)
# Nace 9  
               - nace9q4: if(ea and not employed, align_abs(nace9q4_score, N9q4, filter=nace1y==9 and qual1y==4),False)
               - employed: if(nace9q4,True, employed) 
# Nace 3               
               - nace3q4: if(ea and not employed, align_abs(nace3q4_score, N3q4, filter=nace1y==3 and qual1y==4),False)
               - employed: if(nace3q4,True, employed)  
# Nace 6               
               - nace6q4: if(ea and not employed, align_abs(nace6q4_score, N6q4, filter=nace1y==6 and qual1y==4),False)
               - employed: if(nace6q4,True, employed)    
# Nace 8
               - nace8q4: if(ea and not employed, align_abs(nace8q4_score, N8q4, filter=nace1y==8 and qual1y==4),False)
               - employed: if(nace8q4,True, employed)
# Nace 10              
               - nace10q4: if(ea and not employed, align_abs(nace10q4_score, N10q4, filter=nace1y==10 and qual1y==4),False)
               - employed: if(nace10q4,True, employed)  
# Nace 1
               - nace1q4: if(ea and not employed, align_abs(nace1q4_score, N1q4, filter=nace1y==1 and qual1y==4),False)
               - employed: if(nace1q4,True, employed)                  
# Nace 5
               - nace5q4: if(ea and not employed, align_abs(nace5q4_score, N5q4, filter=nace1y==5 and qual1y==4),False)
               - employed: if(nace5q4,True, employed)
               
####################################################################
##  In the first step the pool of unemployed is defined as the share (by "unem_rate") from all unemployed not employable in the current period. The people are sorted with logit
##  regression by gender, education level, age, last worked job and a random variable.
##  The score is estimated using LFS microdata with command logit and dummy variables, alike in the case of the sectoral score. The command is below. Subsequently, the individual
##  employable in this period are set the pool of employed (attribute “employed_pool”==True).
##  In the second step entities in the pool of employed are matched with unfilled employment spots. Matching picks the most suitable individuals in terms of education level and 
##  field of education for specific segment using the segment scores. Economic sectors are ordered for matching based on their average wage assuring that the sectors with a higher
##  wage are filled in first. Qualification levels are being filled based on their order from one to four assuring the more qualified spots are filled first.
##  Matching in a vague way conserves the educational structure of employed in the segment by allowing only combinations of educational level and field in the segment which were
##  already present there in the initial data. These segment-specific combinations of education level and field are defined in the files 'align_naceXqY.csv'. These files are
##  calculated from LFS. The matching function repeats three times by function "while". 
##  The order of the economic sectors relevant for matching is displayed before proces employment_nace_score.
####################################################################            
            
            employment_new():               
################################### EMPLOYED POOL     
          
               - employed_p: if(ea and not employed, True,False)
# logit IS_UNEMPLOYED ISFEMALE PRIMARY LOWER_SECONDARY UPPER_SECONDARY POST_SECONDARY L_AGRO L_MINING L_INDUSTRY L_ENERGY L_CONSTRUCTION L_MAR_SERVICES_1 L_MAR_SERVICES_2 L_PROF_AND_ADM_SERVICES L_NMAR_SERVICES L_OTHER AGEG17 AGEG22 AGEG27 AGEG32 AGEG37 AGEG42 AGEG47 AGEG52 AGEG57, iter(10)
               - unemployment_score: logit_score(ISFEMALE*(-0.3749105)+PRIMARY*(0.9895794)+LOWER_SECONDARY*(0.9991371)+UPPER_SECONDARY*(0.5739528)+POST_SECONDARY*(0.4202061)+L_AGRO*(-2.084137)+L_MINING*(-2.230162)+L_INDUSTRY*(-2.540999)+L_ENERGY*(-2.41249)+L_CONSTRUCTION*(-3.038264)+L_MAR_SERVICES_1*(-2.600139)+L_MAR_SERVICES_2*(-2.369532)+L_PROF_AND_ADM_SERVICES*(-2.589018)+L_NMAR_SERVICES*(-2.449876)+L_OTHER*(-2.928282)+AGEG17*(2.59994)+AGEG22*(4.229251)+AGEG27*(5.038558)+AGEG32*(4.865106)+AGEG37*(4.808721)+AGEG42*(4.927385)+AGEG47*(4.885406)+AGEG52*(4.785706)+AGEG57*(4.557263)+1*(-6.880234))
               - unemployment_score: if(status1y==2, unemployment_score+1, unemployment_score)
               - unemployment_score: if(status1y==3, unemployment_score-0.5, unemployment_score)
               - unemployed_pool: if(employed_p, 
                                    if(country_b==1,align(unemployment_score, [unem_rate, 1-unem_rate], leave=student or disabled),align(unemployment_score, [unem_rate, 1-unem_rate], leave=student or disabled)),False)
               - unemployed_pool: if(status1y==3 and unemployed_pool, False, unemployed_pool)
               - unemployed_pool: if(status1y==3, align(unemployment_score, [unem_rate, 1-unem_rate]), unemployed_pool)
               - employed_pool: if(ea and not employed and not unemployed_pool, True, False)

               - j: 1
               - i: 0.6               
               - while j<=3: 
      
################################### Q1     
# Nace 4
                    - nace4q1p: if(ea and not employed and employed_pool, align(nace4_score, 'align_nace4q1.csv'), False) 
                    - nace4q1: if(ea and employed_pool and count(nace4q1)<N4q1,
                            if(count(nace4q1p)>N4q1-count(nace4q1), align_abs(nace4_score, (N4q1-count(nace4q1))*i, leave=nace4q1p==False),align_abs(nace4_score, (N4q1-count(nace4q1))*i, take=nace4q1p==True)),nace4q1)
                    - employed: if(nace4q1,True, employed)
                    - employed_pool: if(nace4q1,False, employed_pool)  
# Nace 7
                    - nace7q1p: if(ea and not employed and employed_pool, align(nace7_score, 'align_nace7q1.csv'), False) 
                    - nace7q1: if(ea and employed_pool and count(nace7q1)<N7q1,
                            if(count(nace7q1p)>N7q1-count(nace7q1), align_abs(nace7_score, (N7q1-count(nace7q1))*i, leave=nace7q1p==False),align_abs(nace7_score, (N7q1-count(nace7q1))*i, take=nace7q1p==True)),nace7q1)
                    - employed: if(nace7q1,True, employed)
                    - employed_pool: if(nace7q1,False, employed_pool) 
# Nace 2
                    - nace2q1p: if(ea and not employed and employed_pool, align(nace2_score, 'align_nace2q1.csv'), False) 
                    - nace2q1: if(ea and employed_pool and count(nace2q1)<N2q1,
                            if(count(nace2q1p)>N2q1-count(nace2q1), align_abs(nace2_score, (N2q1-count(nace2q1))*i, leave=nace2q1p==False),align_abs(nace2_score, (N2q1-count(nace2q1))*i, take=nace2q1p==True)),nace2q1)
                    - employed: if(nace2q1,True, employed) 
                    - employed_pool: if(nace2q1,False, employed_pool)                              
# Nace 9               
                    - nace9q1p: if(ea and not employed and employed_pool, align(nace9_score, 'align_nace9q1.csv'), False)
                    - nace9q1: if(ea and employed_pool and count(nace9q1)<N9q1,
                            if(count(nace9q1p)>N9q1-count(nace9q1), align_abs(nace9_score, (N9q1-count(nace9q1))*i, leave=nace9q1p==False),align_abs(nace9_score, (N9q1-count(nace9q1))*i, take=nace9q1p==True)),nace9q1)
                    - employed: if(nace9q1,True, employed)
                    - employed_pool: if(nace9q1,False, employed_pool)               
# Nace 3
                    - nace3q1p: if(ea and not employed and employed_pool, align(nace3_score, 'align_nace3q1.csv'), False) 
                    - nace3q1: if(ea and employed_pool and count(nace3q1)<N3q1,
                            if(count(nace3q1p)>N3q1-count(nace3q1), align_abs(nace3_score, (N3q1-count(nace3q1))*i, leave=nace3q1p==False),align_abs(nace3_score, (N3q1-count(nace3q1))*i, take=nace3q1p==True)),nace3q1)
                    - employed: if(nace3q1,True, employed) 
                    - employed_pool: if(nace3q1,False, employed_pool)   
# Nace 6
                    - nace6q1p: if(ea and not employed and employed_pool, align(nace6_score, 'align_nace6q1.csv'), False) 
                    - nace6q1: if(ea and employed_pool and count(nace6q1)<N6q1,
                            if(count(nace6q1p)>N6q1-count(nace6q1), align_abs(nace6_score, (N6q1-count(nace6q1))*i, leave=nace6q1p==False),align_abs(nace6_score, (N6q1-count(nace6q1))*i, take=nace6q1p==True)),nace6q1)
                    - employed: if(nace6q1,True, employed)   
                    - employed_pool: if(nace6q1,False, employed_pool)                              
# Nace 8                
                    - nace8q1p: if(ea and not employed and employed_pool, align(nace8_score, 'align_nace8q1.csv'), False) 
                    - nace8q1: if(ea and employed_pool and count(nace8q1)<N8q1,
                            if(count(nace8q1p)>N8q1-count(nace8q1), align_abs(nace8_score, (N8q1-count(nace8q1))*i, leave=nace8q1p==False),align_abs(nace8_score, (N8q1-count(nace8q1))*i, take=nace8q1p==True)),nace8q1)
                    - employed: if(nace8q1,True, employed)      
                    - employed_pool: if(nace8q1,False, employed_pool)
# Nace 10
                    - nace10q1p: if(ea and not employed and employed_pool, align(nace10_score, 'align_nace10q1.csv'), False) 
                    - nace10q1: if(ea and employed_pool and count(nace10q1)<N10q1,
                            if(count(nace10q1p)>N10q1-count(nace10q1), align_abs(nace10_score, (N10q1-count(nace10q1))*i, leave=nace10q1p==False),align_abs(nace10_score, (N10q1-count(nace10q1))*i, take=nace10q1p==True)),nace10q1)
                    - employed: if(nace10q1,True, employed)
                    - employed_pool: if(nace10q1,False, employed_pool)               
# Nace 1
                    - nace1q1p: if(ea and not employed and employed_pool, align(nace1_score, 'align_nace1q1.csv'), False) 
                    - nace1q1: if(ea and employed_pool and count(nace1q1)<N1q1,
                            if(count(nace1q1p)>N1q1-count(nace1q1), align_abs(nace1_score, (N1q1-count(nace1q1))*i, leave=nace1q1p==False),align_abs(nace1_score, (N1q1-count(nace1q1))*i, take=nace1q1p==True)),nace1q1)
                    - employed: if(nace1q1,True, employed)
                    - employed_pool: if(nace1q1,False, employed_pool) 
# Nace 5               
                    - nace5q1p: if(ea and not employed and employed_pool, align(nace5_score, 'align_nace5q1.csv'), False) 
                    - nace5q1: if(ea and employed_pool and count(nace5q1)<N5q1,
                            if(count(nace5q1p)>N5q1-count(nace5q1), align_abs(nace5_score, (N5q1-count(nace5q1))*i, leave=nace5q1p==False),align_abs(nace5_score, (N5q1-count(nace5q1))*i, take=nace5q1p==True)),nace5q1)
                    - employed: if(nace5q1,True, employed)
                    - employed_pool: if(nace5q1,False, employed_pool)

################################### Q2
# Nace 4
                    - nace4q2p: if(ea and not employed and employed_pool, align(nace4_score, 'align_nace4q2.csv'), False)                          
                    - nace4q2: if(ea and employed_pool and count(nace4q2)<N4q2,
                            if(count(nace4q2p)>N4q2-count(nace4q2), align_abs(nace4_score, (N4q2-count(nace4q2))*i, leave=nace4q2p==False),align_abs(nace4_score, (N4q2-count(nace4q2))*i, take=nace4q2p==True)),nace4q2)
                    - employed: if(nace4q2,True, employed)
                    - employed_pool: if(nace4q2,False, employed_pool)  
# Nace 7
                    - nace7q2p: if(ea and not employed and employed_pool, align(nace7_score, 'align_nace7q2.csv'), False)                         
                    - nace7q2: if(ea and employed_pool and count(nace7q2)<N7q2,
                            if(count(nace7q2p)>N7q2-count(nace7q2), align_abs(nace7_score, (N7q2-count(nace7q2))*i, leave=nace7q2p==False),align_abs(nace7_score, (N7q2-count(nace7q2))*i, take=nace7q2p==True)),nace7q2)
                    - employed: if(nace7q2,True, employed)
                    - employed_pool: if(nace7q2,False, employed_pool) 
# Nace 2               
                    - nace2q2p: if(ea and not employed and employed_pool, align(nace2_score, 'align_nace2q2.csv'), False)                          
                    - nace2q2: if(ea and employed_pool and count(nace2q2)<N2q2,
                            if(count(nace2q2p)>N2q2-count(nace2q2), align_abs(nace2_score, (N2q2-count(nace2q2))*i, leave=nace2q2p==False),align_abs(nace2_score, (N2q2-count(nace2q2))*i, take=nace2q2p==True)),nace2q2)
                    - employed: if(nace2q2,True, employed)
                    - employed_pool: if(nace2q2,False, employed_pool)               
# Nace 9
                    - nace9q2p: if(ea and not employed and employed_pool, align(nace9_score, 'align_nace9q2.csv'), False)                            
                    - nace9q2: if(ea and employed_pool and count(nace9q2)<N9q2,
                            if(count(nace9q2p)>N9q2-count(nace9q2), align_abs(nace9_score, (N9q2-count(nace9q2))*i, leave=nace9q2p==False),align_abs(nace9_score, (N9q2-count(nace9q2))*i, take=nace9q2p==True)),nace9q2)
                    - employed: if(nace9q2,True, employed)
                    - employed_pool: if(nace9q2,False, employed_pool)               
# Nace 3
                    - nace3q2p: if(ea and not employed and employed_pool, align(nace3_score, 'align_nace3q2.csv'), False)                          
                    - nace3q2: if(ea and employed_pool and count(nace3q2)<N3q2,
                            if(count(nace3q2p)>N3q2-count(nace3q2), align_abs(nace3_score, (N3q2-count(nace3q2))*i, leave=nace3q2p==False),align_abs(nace3_score, (N3q2-count(nace3q2))*i, take=nace3q2p==True)),nace3q2)
                    - employed: if(nace3q2,True, employed)
                    - employed_pool: if(nace3q2,False, employed_pool)   
# Nace 6
                    - nace6q2p: if(ea and not employed and employed_pool, align(nace6_score, 'align_nace6q2.csv'), False)                           
                    - nace6q2: if(ea and employed_pool and count(nace6q2)<N6q2,
                            if(count(nace6q2p)>N6q2-count(nace6q2), align_abs(nace6_score, (N6q2-count(nace6q2))*i, leave=nace6q2p==False),align_abs(nace6_score, (N6q2-count(nace6q2))*i, take=nace6q2p==True)),nace6q2)
                    - employed: if(nace6q2,True, employed)
                    - employed_pool: if(nace6q2,False, employed_pool)               
# Nace 8
                    - nace8q2p: if(ea and not employed and employed_pool, align(nace8_score, 'align_nace8q2.csv'), False)                           
                    - nace8q2: if(ea and employed_pool and count(nace8q2)<N8q2,
                            if(count(nace8q2p)>N8q2-count(nace8q2), align_abs(nace8_score, (N8q2-count(nace8q2))*i, leave=nace8q2p==False),align_abs(nace8_score, (N8q2-count(nace8q2))*i, take=nace8q2p==True)),nace8q2)
                    - employed: if(nace8q2,True, employed) 
                    - employed_pool: if(nace8q2,False, employed_pool)               
# Nace 10
                    - nace10q2p: if(ea and not employed and employed_pool, align(nace10_score, 'align_nace10q2.csv'), False)                          
                    - nace10q2: if(ea and employed_pool and count(nace10q2)<N10q2,
                            if(count(nace10q2p)>N10q2-count(nace10q2), align_abs(nace10_score, (N10q2-count(nace10q2))*i, leave=nace10q2p==False),align_abs(nace10_score, (N10q2-count(nace10q2))*i, take=nace10q2p==True)),nace10q2)
                    - employed: if(nace10q2,True, employed)
                    - employed_pool: if(nace10q2,False, employed_pool)               
# Nace 1
                    - nace1q2p: if(ea and not employed and employed_pool, align(nace1_score, 'align_nace1q2.csv'), False)                          
                    - nace1q2: if(ea and employed_pool and count(nace1q2)<N1q2,
                            if(count(nace1q2p)>N1q2-count(nace1q2), align_abs(nace1_score, (N1q2-count(nace1q2))*i, leave=nace1q2p==False),align_abs(nace1_score, (N1q2-count(nace1q2))*i, take=nace1q2p==True)),nace1q2)
                    - employed: if(nace1q2,True, employed)
                    - employed_pool: if(nace1q2,False, employed_pool)
# Nace 5               
                    - nace5q2p: if(ea and not employed and employed_pool, align(nace5_score, 'align_nace5q2.csv'), False)                          
                    - nace5q2: if(ea and employed_pool and count(nace5q2)<N5q2,
                            if(count(nace5q2p)>N5q2-count(nace5q2), align_abs(nace5_score, (N5q2-count(nace5q2))*i, leave=nace5q2p==False),align_abs(nace5_score, (N5q2-count(nace5q2))*i, take=nace5q2p==True)),nace5q2)
                    - employed: if(nace5q2,True, employed)
                    - employed_pool: if(nace5q2,False, employed_pool)

################################### Q3               
# Nace 4               
                    - nace4q3p: if(ea and not employed and employed_pool, align(nace4_score, 'align_nace4q3.csv'), False) 
                    - nace4q3: if(ea and employed_pool and count(nace4q3)<N4q3,
                            if(count(nace4q3p)>N4q3-count(nace4q3), align_abs(nace4_score, (N4q3-count(nace4q3))*i, leave=nace4q3p==False),align_abs(nace4_score, (N4q3-count(nace4q3))*i, take=nace4q3p==True)),nace4q3)
                    - employed: if(nace4q3,True, employed)
                    - employed_pool: if(nace4q3,False, employed_pool) 
# NACE 7                
                    - nace7q3p: if(ea and not employed and employed_pool, align(nace7_score, 'align_nace7q3.csv'), False)           
                    - nace7q3: if(ea and employed_pool and count(nace7q3)<N7q3,
                            if(count(nace7q3p)>N7q3-count(nace7q3), align_abs(nace7_score, (N7q3-count(nace7q3))*i, leave=nace7q3p==False),align_abs(nace7_score, (N7q3-count(nace7q3))*i, take=nace7q3p==True)),nace7q3)
                    - employed: if(nace7q3,True, employed)  
                    - employed_pool: if(nace7q3,False, employed_pool) 
# NACE 2
                    - nace2q3p: if(ea and not employed and employed_pool, align(nace2_score, 'align_nace2q3.csv'), False)            
                    - nace2q3: if(ea and employed_pool and count(nace2q3)<N2q3,
                            if(count(nace2q3p)>N2q3-count(nace2q3), align_abs(nace2_score, (N2q3-count(nace2q3))*i, leave=nace2q3p==False),align_abs(nace2_score, (N2q3-count(nace2q3))*i, take=nace2q3p==True)),nace2q3)
                    - employed: if(nace2q3,True, employed)
                    - employed_pool: if(nace2q3,False, employed_pool)   
# NACE 9
                    - nace9q3p: if(ea and not employed and employed_pool, align(nace9_score, 'align_nace9q3.csv'), False)             
                    - nace9q3: if(ea and employed_pool and count(nace9q3)<N9q3,
                            if(count(nace9q3p)>N9q3-count(nace9q3), align_abs(nace9_score, (N9q3-count(nace9q3))*i, leave=nace9q3p==False),align_abs(nace9_score, (N9q3-count(nace9q3))*i, take=nace9q3p==True)),nace9q3)
                    - employed: if(nace9q3,True, employed)
                    - employed_pool: if(nace9q3,False, employed_pool)  
# NACE 3                
                    - nace3q3p: if(ea and not employed and employed_pool, align(nace3_score, 'align_nace3q3.csv'), False)           
                    - nace3q3: if(ea and employed_pool and count(nace3q3)<N3q3,
                            if(count(nace3q3p)>N3q3-count(nace3q3), align_abs(nace3_score, (N3q3-count(nace3q3))*i, leave=nace3q3p==False),align_abs(nace3_score, (N3q3-count(nace3q3))*i, take=nace3q3p==True)),nace3q3)
                    - employed: if(nace3q3,True, employed)
                    - employed_pool: if(nace3q3,False, employed_pool)   
# NACE 6
                    - nace6q3p: if(ea and not employed and employed_pool, align(nace6_score, 'align_nace6q3.csv'), False)             
                    - nace6q3: if(ea and employed_pool and count(nace6q3)<N6q3,
                            if(count(nace6q3p)>N6q3-count(nace6q3), align_abs(nace6_score, (N6q3-count(nace6q3))*i, leave=nace6q3p==False),align_abs(nace6_score, (N6q3-count(nace6q3))*i, take=nace6q3p==True)),nace6q3)
                    - employed: if(nace6q3,True, employed)
                    - employed_pool: if(nace6q3,False, employed_pool) 
# Nace 8                
                    - nace8q3p: if(ea and not employed and employed_pool, align(nace8_score, 'align_nace8q3.csv'), False)               
                    - nace8q3: if(ea and employed_pool and count(nace8q3)<N8q3,
                            if(count(nace8q3p)>N8q3-count(nace8q3), align_abs(nace8_score, (N8q3-count(nace8q3))*i, leave=nace8q3p==False),align_abs(nace8_score, (N8q3-count(nace8q3))*i, take=nace8q3p==True)),nace8q3)
                    - employed: if(nace8q3,True, employed)  
                    - employed_pool: if(nace8q3,False, employed_pool) 
# Nace 10
                    - nace10q3p: if(ea and not employed and employed_pool, align(nace10_score, 'align_nace10q3.csv'), False)        
                    - nace10q3: if(ea and employed_pool and count(nace10q3)<N10q3,
                            if(count(nace10q3p)>N10q3-count(nace10q3), align_abs(nace10_score, (N10q3-count(nace10q3))*i, leave=nace10q3p==False),align_abs(nace10_score, (N10q3-count(nace10q3))*i, take=nace10q3p==True)),nace10q3)
                    - employed: if(nace10q3,True, employed) 
                    - employed_pool: if(nace10q3,False, employed_pool)
# NACE 1
                    - nace1q3p: if(ea and not employed and employed_pool, align(nace1_score, 'align_nace1q3.csv'), False)           
                    - nace1q3: if(ea and employed_pool and count(nace1q3)<N1q3,
                            if(count(nace1q3p)>N1q3-count(nace1q3), align_abs(nace1_score, (N1q3-count(nace1q3))*i, leave=nace1q3p==False),align_abs(nace1_score, (N1q3-count(nace1q3))*i, take=nace1q3p==True)),nace1q3)
                    - employed: if(nace1q3,True, employed)
                    - employed_pool: if(nace1q3,False, employed_pool) 
# Nace 5
                    - nace5q3p: if(ea and not employed and employed_pool, align(nace5_score, 'align_nace5q3.csv'), False)            
                    - nace5q3: if(ea and employed_pool and count(nace5q3)<N5q3,
                            if(count(nace5q3p)>N5q3-count(nace5q3), align_abs(nace5_score, (N5q3-count(nace5q3))*i, leave=nace5q3p==False),align_abs(nace5_score, (N5q3-count(nace5q3))*i, take=nace5q3p==True)),nace5q3)
                    - employed: if(nace5q3,True, employed) 
                    - employed_pool: if(nace5q3,False, employed_pool)               

################################### Q4               
# Nace 4               
                    - nace4q4p: if(ea and not employed and employed_pool, align(nace4_score, 'align_nace4q4.csv'), False) 
                    - nace4q4: if(ea and employed_pool and count(nace4q4)<N4q4,
                            if(count(nace4q4p)>N4q4-count(nace4q4), align_abs(nace4_score, (N4q4-count(nace4q4))*i, leave=nace4q4p==False),align_abs(nace4_score, (N4q4-count(nace4q4))*i, take=nace4q4p==True)),nace4q4)
                    - employed: if(nace4q4,True, employed)
                    - employed_pool: if(nace4q4,False, employed_pool) 
# NACE 7                
                    - nace7q4p: if(ea and not employed and employed_pool, align(nace7_score, 'align_nace7q4.csv'), False)           
                    - nace7q4: if(ea and employed_pool and count(nace7q4)<N7q4,
                            if(count(nace7q4p)>N7q4-count(nace7q4), align_abs(nace7_score, (N7q4-count(nace7q4))*i, leave=nace7q4p==False),align_abs(nace7_score, (N7q4-count(nace7q4))*i, take=nace7q4p==True)),nace7q4)
                    - employed: if(nace7q4,True, employed)  
                    - employed_pool: if(nace7q4,False, employed_pool) 
# NACE 2
                    - nace2q4p: if(ea and not employed and employed_pool, align(nace2_score, 'align_nace2q4.csv'), False)            
                    - nace2q4: if(ea and employed_pool and count(nace2q4)<N2q4,
                            if(count(nace2q4p)>N2q4-count(nace2q4), align_abs(nace2_score, (N2q4-count(nace2q4))*i, leave=nace2q4p==False),align_abs(nace2_score, (N2q4-count(nace2q4))*i, take=nace2q4p==True)),nace2q4)
                    - employed: if(nace2q4,True, employed)
                    - employed_pool: if(nace2q4,False, employed_pool)   
# NACE 9
                    - nace9q4p: if(ea and not employed and employed_pool, align(nace9_score, 'align_nace9q4.csv'), False)             
                    - nace9q4: if(ea and employed_pool and count(nace9q4)<N9q4,
                            if(count(nace9q4p)>N9q4-count(nace9q4), align_abs(nace9_score, (N9q4-count(nace9q4))*i, leave=nace9q4p==False),align_abs(nace9_score, (N9q4-count(nace9q4))*i, take=nace9q4p==True)),nace9q4)
                    - employed: if(nace9q4,True, employed)
                    - employed_pool: if(nace9q4,False, employed_pool)  
# NACE 3                
                    - nace3q4p: if(ea and not employed and employed_pool, align(nace3_score, 'align_nace3q4.csv'), False)           
                    - nace3q4: if(ea and employed_pool and count(nace3q4)<N3q4,
                            if(count(nace3q4p)>N3q4-count(nace3q4), align_abs(nace3_score, (N3q4-count(nace3q4))*i, leave=nace3q4p==False),align_abs(nace3_score, (N3q4-count(nace3q4))*i, take=nace3q4p==True)),nace3q4)
                    - employed: if(nace3q4,True, employed)
                    - employed_pool: if(nace3q4,False, employed_pool)   
# NACE 6
                    - nace6q4p: if(ea and not employed and employed_pool, align(nace6_score, 'align_nace6q4.csv'), False)             
                    - nace6q4: if(ea and employed_pool and count(nace6q4)<N6q4,
                            if(count(nace6q4p)>N6q4-count(nace6q4), align_abs(nace6_score, (N6q4-count(nace6q4))*i, leave=nace6q4p==False),align_abs(nace6_score, (N6q4-count(nace6q4))*i, take=nace6q4p==True)),nace6q4)
                    - employed: if(nace6q4,True, employed)
                    - employed_pool: if(nace6q4,False, employed_pool) 
# Nace 8                
                    - nace8q4p: if(ea and not employed and employed_pool, align(nace8_score, 'align_nace8q4.csv'), False)               
                    - nace8q4: if(ea and employed_pool and count(nace8q4)<N8q4,
                            if(count(nace8q4p)>N8q4-count(nace8q4), align_abs(nace8_score, (N8q4-count(nace8q4))*i, leave=nace8q4p==False),align_abs(nace8_score, (N8q4-count(nace8q4))*i, take=nace8q4p==True)),nace8q4)
                    - employed: if(nace8q4,True, employed)  
                    - employed_pool: if(nace8q4,False, employed_pool) 
# Nace 10
                    - nace10q4p: if(ea and not employed and employed_pool, align(nace10_score, 'align_nace10q4.csv'), False)        
                    - nace10q4: if(ea and employed_pool and count(nace10q4)<N10q4,
                            if(count(nace10q4p)>N10q4-count(nace10q4), align_abs(nace10_score, (N10q4-count(nace10q4))*i, leave=nace10q4p==False),align_abs(nace10_score, (N10q4-count(nace10q4))*i, take=nace10q4p==True)),nace10q4)
                    - employed: if(nace10q4,True, employed) 
                    - employed_pool: if(nace10q4,False, employed_pool)
# NACE 1
                    - nace1q4p: if(ea and not employed and employed_pool, align(nace1_score, 'align_nace1q4.csv'), False)           
                    - nace1q4: if(ea and employed_pool and count(nace1q4)<N1q4,
                            if(count(nace1q4p)>N1q4-count(nace1q4), align_abs(nace1_score, (N1q4-count(nace1q4))*i, leave=nace1q4p==False),align_abs(nace1_score, (N1q4-count(nace1q4))*i, take=nace1q4p==True)),nace1q4)
                    - employed: if(nace1q4,True, employed)
                    - employed_pool: if(nace1q4,False, employed_pool) 
# Nace 5
                    - nace5q4p: if(ea and not employed and employed_pool, align(nace5_score, 'align_nace5q4.csv'), False)            
                    - nace5q4: if(ea and employed_pool and count(nace5q4)<N5q4,
                            if(count(nace5q4p)>N5q4-count(nace5q4), align_abs(nace5_score, (N5q4-count(nace5q4))*i, leave=nace5q4p==False),align_abs(nace5_score, (N5q4-count(nace5q4))*i, take=nace5q4p==True)),nace5q4)
                    - employed: if(nace5q4,True, employed) 
                    - employed_pool: if(nace5q4,False, employed_pool)                   
               
                    - i: i + 0.2     
                    - j: j + 1             


####################################################################                    
##  The whole matching so far was only done using Slovak labour supply (born in Slovakia or already present in the country during the previous periods). In segments where, up to 
##  this point empty jobs still remain, the process “employed_immigrants” clones new workers out of those already employed in the segment. For cloning, immigrants already 
##  employed in the segment are preferred. Subsequently important attributes of the cloned immigrants, age and country of origin, are simulated assuming segment- specific 
##  distributions of these attributes. The age structure of inflowing immigrants is imported into the model via the table “imi_age”. The country of origin is imputed based on 
##  the segment specific distributions defined in the exogenous table “global_country”. Defining these attributes by an external table allows for easy scenario setup.                  
####################################################################               

            employment_immigrants():               
###########################  immigrants   
          
               - immigrant_sim: False
               - immigrant_sim2: False
########################## Q1  

# NACE 5       
               - immigrant_sim2: False        
               - to_immigrate: False
               - immigrant_score: if(country_b!=1 and toret<0 and ea and nace5q1, 2, 0)
               - to_immigrate: if(ea and count(nace5q1)<N5q1, align_abs(immigrant_score, N5q1-count(nace5q1)),False) 
               - clone(filter=to_immigrate, immigrant_sim=True, immigrant_sim2=True, country_b=choice([5],[1]))
               - function_nace()               
               - immigrant: if(immigrant_sim, True, immigrant)
               - employed: if(immigrant_sim2,True,employed)
               - nace5q1: if(nace5q1 or immigrant_sim2, True, nace5q1)              
               - immigrant_new: if(immigrant_sim, True, immigrant_new)       

               - country_p: False    
               - country_p: if(immigrant_sim2, align_abs(0.0, count(immigrant_sim2)*cou_2_N5q1, leave=country_b!=5),False)
               - country_b: if(country_p, EU,country_b)     
               - country_p: False    
               - country_p: if(immigrant_sim2, align_abs(0.0, count(immigrant_sim2)*cou_3_N5q1, leave=country_b!=5),False)
               - country_b: if(country_p, OtherEU,country_b)     
               - country_p: False    
               - country_p: if(immigrant_sim2, align_abs(0.0, count(immigrant_sim2)*cou_4_N5q1, leave=country_b!=5),False)
               - country_b: if(country_p, WORLD,country_b)     
               
# NACE 8                      
               - immigrant_sim2: False                     
               - to_immigrate: False
               - immigrant_score: if(country_b!=1 and toret<0 and ea and nace8q1, 2, 0)
               - to_immigrate: if(ea and count(nace8q1)<N8q1, align_abs(immigrant_score, N8q1-count(nace8q1)),False) 
               - clone(filter=to_immigrate, immigrant_sim=True, immigrant_sim2=True, country_b=choice([5],[1]))
               - function_nace()
               - immigrant: if(immigrant_sim, True, immigrant)
               - employed: if(immigrant_sim2,True,employed)
               - nace8q1: if(nace8q1 or immigrant_sim2, True, nace8q1)  
               - immigrant_new: if(immigrant_sim, True, immigrant_new)
               
               - country_p: False    
               - country_p: if(immigrant_sim2, align_abs(0.0, count(immigrant_sim2)*cou_2_N8q1, leave=country_b!=5),False)
               - country_b: if(country_p, EU,country_b)     
               - country_p: False    
               - country_p: if(immigrant_sim2, align_abs(0.0, count(immigrant_sim2)*cou_3_N8q1, leave=country_b!=5),False)
               - country_b: if(country_p, OtherEU,country_b)     
               - country_p: False    
               - country_p: if(immigrant_sim2, align_abs(0.0, count(immigrant_sim2)*cou_4_N8q1, leave=country_b!=5),False)
               - country_b: if(country_p, WORLD,country_b)     
               
# NACE 9 
               - immigrant_sim2: False                                   
               - to_immigrate: False
               - immigrant_score: if(country_b!=1 and toret<0 and ea and nace9q1, 2, 0)
               - to_immigrate: if(ea and count(nace9q1)<N9q1, align_abs(immigrant_score, N9q1-count(nace9q1)),False) 
               - clone(filter=to_immigrate, immigrant_sim=True, immigrant_sim2=True, country_b=choice([5],[1]))
               - function_nace()
               - immigrant: if(immigrant_sim, True, immigrant)
               - employed: if(immigrant_sim2,True,employed)
               - nace9q1: if(nace9q1 or immigrant_sim2, True, nace9q1)
               - immigrant_new: if(immigrant_sim, True, immigrant_new)   

               - country_p: False    
               - country_p: if(immigrant_sim2, align_abs(0.0, count(immigrant_sim2)*cou_2_N9q1, leave=country_b!=5),False)
               - country_b: if(country_p, EU,country_b)     
               - country_p: False    
               - country_p: if(immigrant_sim2, align_abs(0.0, count(immigrant_sim2)*cou_3_N9q1, leave=country_b!=5),False)
               - country_b: if(country_p, OtherEU,country_b)     
               - country_p: False    
               - country_p: if(immigrant_sim2, align_abs(0.0, count(immigrant_sim2)*cou_4_N9q1, leave=country_b!=5),False)
               - country_b: if(country_p, WORLD,country_b)     
               
# NACE 6
               - immigrant_sim2: False                     
               - to_immigrate: False
               - immigrant_score: if(country_b!=1 and toret<0 and ea and nace6q1, 2, 0)
               - to_immigrate: if(ea and count(nace6q1)<N6q1, align_abs(immigrant_score, N6q1-count(nace6q1)),False) 
               - clone(filter=to_immigrate, immigrant_sim=True, immigrant_sim2=True, country_b=choice([5],[1]))
               - function_nace()
               - immigrant: if(immigrant_sim, True, immigrant)
               - employed: if(immigrant_sim2,True,employed)
               - nace6q1: if(nace6q1 or immigrant_sim2, True, nace6q1)
               - immigrant_new: if(immigrant_sim, True, immigrant_new) 
               
               - country_p: False    
               - country_p: if(immigrant_sim2, align_abs(0.0, count(immigrant_sim2)*cou_2_N6q1, leave=country_b!=5),False)
               - country_b: if(country_p, EU,country_b)     
               - country_p: False    
               - country_p: if(immigrant_sim2, align_abs(0.0, count(immigrant_sim2)*cou_3_N6q1, leave=country_b!=5),False)
               - country_b: if(country_p, OtherEU,country_b)     
               - country_p: False    
               - country_p: if(immigrant_sim2, align_abs(0.0, count(immigrant_sim2)*cou_4_N6q1, leave=country_b!=5),False)
               - country_b: if(country_p, WORLD,country_b)     
               
# NACE 2
               - immigrant_sim2: False                     
               - to_immigrate: False
               - immigrant_score: if(country_b!=1 and toret<0 and ea and nace2q1, 2, 0)
               - to_immigrate: if(ea and count(nace2q1)<N2q1, align_abs(immigrant_score, N2q1-count(nace2q1)),False) 
               - clone(filter=to_immigrate, immigrant_sim=True, immigrant_sim2=True, country_b=choice([5],[1]))
               - function_nace()
               - immigrant: if(immigrant_sim, True, immigrant)
               - employed: if(immigrant_sim2,True,employed)
               - nace2q1: if(nace2q1 or immigrant_sim2, True, nace2q1)
               - immigrant_new: if(immigrant_sim, True, immigrant_new) 
               
               - country_p: False    
               - country_p: if(immigrant_sim2, align_abs(0.0, count(immigrant_sim2)*cou_2_N2q1, leave=country_b!=5),False)
               - country_b: if(country_p, EU,country_b)     
               - country_p: False    
               - country_p: if(immigrant_sim2, align_abs(0.0, count(immigrant_sim2)*cou_3_N2q1, leave=country_b!=5),False)
               - country_b: if(country_p, OtherEU,country_b)     
               - country_p: False    
               - country_p: if(immigrant_sim2, align_abs(0.0, count(immigrant_sim2)*cou_4_N2q1, leave=country_b!=5),False)
               - country_b: if(country_p, WORLD,country_b)     
               
# NACE 7
               - immigrant_sim2: False                     
               - to_immigrate: False
               - immigrant_score: if(country_b!=1 and toret<0 and ea and nace7q1, 2, 0)
               - to_immigrate: if(ea and count(nace7q1)<N7q1, align_abs(immigrant_score, N7q1-count(nace7q1)),False) 
               - clone(filter=to_immigrate, immigrant_sim=True, immigrant_sim2=True, country_b=choice([5],[1]))
               - function_nace()
               - immigrant: if(immigrant_sim, True, immigrant)
               - employed: if(immigrant_sim2,True,employed)
               - nace7q1: if(nace7q1 or immigrant_sim2, True, nace7q1)
               - immigrant_new: if(immigrant_sim, True, immigrant_new)  
               
               - country_p: False    
               - country_p: if(immigrant_sim2, align_abs(0.0, count(immigrant_sim2)*cou_2_N7q1, leave=country_b!=5),False)
               - country_b: if(country_p, EU,country_b)     
               - country_p: False    
               - country_p: if(immigrant_sim2, align_abs(0.0, count(immigrant_sim2)*cou_3_N7q1, leave=country_b!=5),False)
               - country_b: if(country_p, OtherEU,country_b)     
               - country_p: False    
               - country_p: if(immigrant_sim2, align_abs(0.0, count(immigrant_sim2)*cou_4_N7q1, leave=country_b!=5),False)
               - country_b: if(country_p, WORLD,country_b)     
               
# NACE 3
               - immigrant_sim2: False                     
               - to_immigrate: False
               - immigrant_score: if(country_b!=1 and toret<0 and ea and nace3q1, 2, 0)
               - to_immigrate: if(ea and count(nace3q1)<N3q1, align_abs(immigrant_score, N3q1-count(nace3q1)),False) 
               - clone(filter=to_immigrate, immigrant_sim=True, immigrant_sim2=True, country_b=choice([5],[1]))
               - function_nace()
               - immigrant: if(immigrant_sim, True, immigrant)
               - employed: if(immigrant_sim2,True,employed)
               - nace3q1: if(nace3q1 or immigrant_sim2, True, nace3q1)
               - immigrant_new: if(immigrant_sim, True, immigrant_new)
               
               - country_p: False    
               - country_p: if(immigrant_sim2, align_abs(0.0, count(immigrant_sim2)*cou_2_N3q1, leave=country_b!=5),False)
               - country_b: if(country_p, EU,country_b)     
               - country_p: False    
               - country_p: if(immigrant_sim2, align_abs(0.0, count(immigrant_sim2)*cou_3_N3q1, leave=country_b!=5),False)
               - country_b: if(country_p, OtherEU,country_b)     
               - country_p: False    
               - country_p: if(immigrant_sim2, align_abs(0.0, count(immigrant_sim2)*cou_4_N3q1, leave=country_b!=5),False)
               - country_b: if(country_p, WORLD,country_b)     
               
# NACE 1
               - immigrant_sim2: False                     
               - to_immigrate: False
               - immigrant_score: if(country_b!=1 and toret<0 and ea and nace1q1, 2, 0)
               - to_immigrate: if(ea and count(nace1q1)<N1q1, align_abs(immigrant_score, N1q1-count(nace1q1)),False) 
               - clone(filter=to_immigrate, immigrant_sim=True, immigrant_sim2=True, country_b=choice([5],[1]))
               - function_nace()
               - immigrant: if(immigrant_sim, True, immigrant)
               - employed: if(immigrant_sim2,True,employed)
               - nace1q1: if(nace1q1 or immigrant_sim2, True, nace1q1)
               - immigrant_new: if(immigrant_sim, True, immigrant_new)    

               - country_p: False    
               - country_p: if(immigrant_sim2, align_abs(0.0, count(immigrant_sim2)*cou_2_N1q1, leave=country_b!=5),False)
               - country_b: if(country_p, EU,country_b)     
               - country_p: False    
               - country_p: if(immigrant_sim2, align_abs(0.0, count(immigrant_sim2)*cou_3_N1q1, leave=country_b!=5),False)
               - country_b: if(country_p, OtherEU,country_b)     
               - country_p: False    
               - country_p: if(immigrant_sim2, align_abs(0.0, count(immigrant_sim2)*cou_4_N1q1, leave=country_b!=5),False)
               - country_b: if(country_p, WORLD,country_b)     
               
# NACE 4
               - immigrant_sim2: False                     
               - to_immigrate: False
               - immigrant_score: if(country_b!=1 and toret<0 and ea and nace4q1, 2, 0)
               - to_immigrate: if(ea and count(nace4q1)<N4q1, align_abs(immigrant_score, N4q1-count(nace4q1)),False) 
               - clone(filter=to_immigrate, immigrant_sim=True, immigrant_sim2=True, country_b=choice([5],[1]))
               - function_nace()
               - immigrant: if(immigrant_sim, True, immigrant)
               - employed: if(immigrant_sim2,True,employed)
               - nace4q1: if(nace4q1 or immigrant_sim2, True, nace4q1)
               - immigrant_new: if(immigrant_sim, True, immigrant_new) 
               
               - country_p: False    
               - country_p: if(immigrant_sim2, align_abs(0.0, count(immigrant_sim2)*cou_2_N4q1, leave=country_b!=5),False)
               - country_b: if(country_p, EU,country_b)     
               - country_p: False    
               - country_p: if(immigrant_sim2, align_abs(0.0, count(immigrant_sim2)*cou_3_N4q1, leave=country_b!=5),False)
               - country_b: if(country_p, OtherEU,country_b)     
               - country_p: False    
               - country_p: if(immigrant_sim2, align_abs(0.0, count(immigrant_sim2)*cou_4_N4q1, leave=country_b!=5),False)
               - country_b: if(country_p, WORLD,country_b)     
               
# NACE 10    
               - immigrant_sim2: False                               
               - to_immigrate: False
               - immigrant_score: if(country_b!=1 and toret<0 and ea and nace10q1, 2, 0)
               - to_immigrate: if(ea and count(nace10q1)<N10q1, align_abs(immigrant_score, N10q1-count(nace10q1)),False)
               - clone(filter=to_immigrate, immigrant_sim=True, immigrant_sim2=True, country_b=choice([5],[1]))
               - function_nace()
               - immigrant: if(immigrant_sim, True, immigrant)
               - employed: if(immigrant_sim2,True,employed)
               - nace10q1: if(nace10q1 or immigrant_sim2, True, nace10q1)
               - immigrant_new: if(immigrant_sim, True, immigrant_new)  

               - country_p: False    
               - country_p: if(immigrant_sim2, align_abs(0.0, count(immigrant_sim2)*cou_2_N10q1, leave=country_b!=5),False)
               - country_b: if(country_p, EU,country_b)     
               - country_p: False    
               - country_p: if(immigrant_sim2, align_abs(0.0, count(immigrant_sim2)*cou_3_N10q1, leave=country_b!=5),False)
               - country_b: if(country_p, OtherEU,country_b)     
               - country_p: False    
               - country_p: if(immigrant_sim2, align_abs(0.0, count(immigrant_sim2)*cou_4_N10q1, leave=country_b!=5),False)
               - country_b: if(country_p, WORLD,country_b)     
               

########################## Q2  
# NACE 5       
               - immigrant_sim2: False           
               - to_immigrate: False
               - immigrant_score: if(country_b!=1 and toret<0 and ea and nace5q2, 2, 0)
               - to_immigrate: if(ea and count(nace5q2)<N5q2, align_abs(immigrant_score, N5q2-count(nace5q2)),False) 
               - clone(filter=to_immigrate, immigrant_sim=True, immigrant_sim2=True, country_b=choice([5],[1]))
               - function_nace()
               - immigrant: if(immigrant_sim, True, immigrant)
               - employed: if(immigrant_sim2,True,employed)
               - nace5q2: if(nace5q2 or immigrant_sim2, True, nace5q2)              
               - immigrant_new: if(immigrant_sim, True, immigrant_new)       

               - country_p: False    
               - country_p: if(immigrant_sim2, align_abs(0.0, count(immigrant_sim2)*cou_2_N5q2, leave=country_b!=5),False)
               - country_b: if(country_p, EU,country_b)     
               - country_p: False    
               - country_p: if(immigrant_sim2, align_abs(0.0, count(immigrant_sim2)*cou_3_N5q2, leave=country_b!=5),False)
               - country_b: if(country_p, OtherEU,country_b)     
               - country_p: False    
               - country_p: if(immigrant_sim2, align_abs(0.0, count(immigrant_sim2)*cou_4_N5q2, leave=country_b!=5),False)
               - country_b: if(country_p, WORLD,country_b)     
               
# NACE 8        
               - immigrant_sim2: False                     
               - to_immigrate: False
               - immigrant_score: if(country_b!=1 and toret<0 and ea and nace8q2, 2, 0)
               - to_immigrate: if(ea and count(nace8q2)<N8q2, align_abs(immigrant_score, N8q2-count(nace8q2)),False) 
               - clone(filter=to_immigrate, immigrant_sim=True, immigrant_sim2=True, country_b=choice([5],[1]))
               - function_nace()
               - immigrant: if(immigrant_sim, True, immigrant)
               - employed: if(immigrant_sim2,True,employed)
               - nace8q2: if(nace8q2 or immigrant_sim2, True, nace8q2)  
               - immigrant_new: if(immigrant_sim, True, immigrant_new)
               
               - country_p: False    
               - country_p: if(immigrant_sim2, align_abs(0.0, count(immigrant_sim2)*cou_2_N8q2, leave=country_b!=5),False)
               - country_b: if(country_p, EU,country_b)     
               - country_p: False    
               - country_p: if(immigrant_sim2, align_abs(0.0, count(immigrant_sim2)*cou_3_N8q2, leave=country_b!=5),False)
               - country_b: if(country_p, OtherEU,country_b)     
               - country_p: False    
               - country_p: if(immigrant_sim2, align_abs(0.0, count(immigrant_sim2)*cou_4_N8q2, leave=country_b!=5),False)
               - country_b: if(country_p, WORLD,country_b)     
               
# NACE 9 
               - immigrant_sim2: False               
               - to_immigrate: False
               - immigrant_score: if(country_b!=1 and toret<0 and ea and nace9q2, 2, 0)
               - to_immigrate: if(ea and count(nace9q2)<N9q2, align_abs(immigrant_score, N9q2-count(nace9q2)),False) 
               - clone(filter=to_immigrate, immigrant_sim=True, immigrant_sim2=True, country_b=choice([5],[1]))
               - function_nace()
               - immigrant: if(immigrant_sim, True, immigrant)
               - employed: if(immigrant_sim2,True,employed)
               - nace9q2: if(nace9q2 or immigrant_sim2, True, nace9q2)
               - immigrant_new: if(immigrant_sim, True, immigrant_new)     

               - country_p: False    
               - country_p: if(immigrant_sim2, align_abs(0.0, count(immigrant_sim2)*cou_2_N9q2, leave=country_b!=5),False)
               - country_b: if(country_p, EU,country_b)     
               - country_p: False    
               - country_p: if(immigrant_sim2, align_abs(0.0, count(immigrant_sim2)*cou_3_N9q2, leave=country_b!=5),False)
               - country_b: if(country_p, OtherEU,country_b)     
               - country_p: False    
               - country_p: if(immigrant_sim2, align_abs(0.0, count(immigrant_sim2)*cou_4_N9q2, leave=country_b!=5),False)
               - country_b: if(country_p, WORLD,country_b)     
               
# NACE 6
               - immigrant_sim2: False 
               - to_immigrate: False
               - immigrant_score: if(country_b!=1 and toret<0 and ea and nace6q2, 2, 0)
               - to_immigrate: if(ea and count(nace6q2)<N6q2, align_abs(immigrant_score, N6q2-count(nace6q2)),False) 
               - clone(filter=to_immigrate, immigrant_sim=True, immigrant_sim2=True, country_b=choice([5],[1]))
               - function_nace()
               - immigrant: if(immigrant_sim, True, immigrant)
               - employed: if(immigrant_sim2,True,employed)
               - nace6q2: if(nace6q2 or immigrant_sim2, True, nace6q2)
               - immigrant_new: if(immigrant_sim, True, immigrant_new) 
               
               - country_p: False    
               - country_p: if(immigrant_sim2, align_abs(0.0, count(immigrant_sim2)*cou_2_N6q2, leave=country_b!=5),False)
               - country_b: if(country_p, EU,country_b)     
               - country_p: False    
               - country_p: if(immigrant_sim2, align_abs(0.0, count(immigrant_sim2)*cou_3_N6q2, leave=country_b!=5),False)
               - country_b: if(country_p, OtherEU,country_b)     
               - country_p: False    
               - country_p: if(immigrant_sim2, align_abs(0.0, count(immigrant_sim2)*cou_4_N6q2, leave=country_b!=5),False)
               - country_b: if(country_p, WORLD,country_b)     
               
# NACE 2
               - immigrant_sim2: False 
               - to_immigrate: False
               - immigrant_score: if(country_b!=1 and toret<0 and ea and nace2q2, 2, 0)
               - to_immigrate: if(ea and count(nace2q2)<N2q2, align_abs(immigrant_score, N2q2-count(nace2q2)),False) 
               - clone(filter=to_immigrate, immigrant_sim=True, immigrant_sim2=True, country_b=choice([5],[1]))
               - function_nace()
               - immigrant: if(immigrant_sim, True, immigrant)
               - employed: if(immigrant_sim2,True,employed)
               - nace2q2: if(nace2q2 or immigrant_sim2, True, nace2q2)
               - immigrant_new: if(immigrant_sim, True, immigrant_new) 
               
               - country_p: False    
               - country_p: if(immigrant_sim2, align_abs(0.0, count(immigrant_sim2)*cou_2_N2q2, leave=country_b!=5),False)
               - country_b: if(country_p, EU,country_b)     
               - country_p: False    
               - country_p: if(immigrant_sim2, align_abs(0.0, count(immigrant_sim2)*cou_3_N2q2, leave=country_b!=5),False)
               - country_b: if(country_p, OtherEU,country_b)     
               - country_p: False    
               - country_p: if(immigrant_sim2, align_abs(0.0, count(immigrant_sim2)*cou_4_N2q2, leave=country_b!=5),False)
               - country_b: if(country_p, WORLD,country_b)     
               
# NACE 7
               - immigrant_sim2: False 
               - to_immigrate: False
               - immigrant_score: if(country_b!=1 and toret<0 and ea and nace7q2, 2, 0)
               - to_immigrate: if(ea and count(nace7q2)<N7q2, align_abs(immigrant_score, N7q2-count(nace7q2)),False) 
               - clone(filter=to_immigrate, immigrant_sim=True, immigrant_sim2=True, country_b=choice([5],[1]))
               - function_nace()
               - immigrant: if(immigrant_sim, True, immigrant)
               - employed: if(immigrant_sim2,True,employed)
               - nace7q2: if(nace7q2 or immigrant_sim2, True, nace7q2)
               - immigrant_new: if(immigrant_sim, True, immigrant_new)  
               
               - country_p: False    
               - country_p: if(immigrant_sim2, align_abs(0.0, count(immigrant_sim2)*cou_2_N7q2, leave=country_b!=5),False)
               - country_b: if(country_p, EU,country_b)     
               - country_p: False    
               - country_p: if(immigrant_sim2, align_abs(0.0, count(immigrant_sim2)*cou_3_N7q2, leave=country_b!=5),False)
               - country_b: if(country_p, OtherEU,country_b)     
               - country_p: False    
               - country_p: if(immigrant_sim2, align_abs(0.0, count(immigrant_sim2)*cou_4_N7q2, leave=country_b!=5),False)
               - country_b: if(country_p, WORLD,country_b)     
               
# NACE 3
               - immigrant_sim2: False 
               - to_immigrate: False
               - immigrant_score: if(country_b!=1 and toret<0 and ea and nace3q2, 2, 0)
               - to_immigrate: if(ea and count(nace3q2)<N3q2, align_abs(immigrant_score, N3q2-count(nace3q2)),False) 
               - clone(filter=to_immigrate, immigrant_sim=True, immigrant_sim2=True, country_b=choice([5],[1]))
               - function_nace()
               - immigrant: if(immigrant_sim, True, immigrant)
               - employed: if(immigrant_sim2,True,employed)
               - nace3q2: if(nace3q2 or immigrant_sim2, True, nace3q2)
               - immigrant_new: if(immigrant_sim, True, immigrant_new)

               - country_p: False    
               - country_p: if(immigrant_sim2, align_abs(0.0, count(immigrant_sim2)*cou_2_N3q2, leave=country_b!=5),False)
               - country_b: if(country_p, EU,country_b)     
               - country_p: False    
               - country_p: if(immigrant_sim2, align_abs(0.0, count(immigrant_sim2)*cou_3_N3q2, leave=country_b!=5),False)
               - country_b: if(country_p, OtherEU,country_b)     
               - country_p: False    
               - country_p: if(immigrant_sim2, align_abs(0.0, count(immigrant_sim2)*cou_4_N3q2, leave=country_b!=5),False)
               - country_b: if(country_p, WORLD,country_b)     
               
# NACE 1
               - immigrant_sim2: False 
               - to_immigrate: False
               - immigrant_score: if(country_b!=1 and toret<0 and ea and nace1q2, 2, 0)
               - to_immigrate: if(ea and count(nace1q2)<N1q2, align_abs(immigrant_score, N1q2-count(nace1q2)),False) 
               - clone(filter=to_immigrate, immigrant_sim=True, immigrant_sim2=True, country_b=choice([5],[1]))
               - function_nace()
               - immigrant: if(immigrant_sim, True, immigrant)
               - employed: if(immigrant_sim2,True,employed)
               - nace1q2: if(nace1q2 or immigrant_sim2, True, nace1q2)
               - immigrant_new: if(immigrant_sim, True, immigrant_new)      
               
               - country_p: False    
               - country_p: if(immigrant_sim2, align_abs(0.0, count(immigrant_sim2)*cou_2_N1q2, leave=country_b!=5),False)
               - country_b: if(country_p, EU,country_b)     
               - country_p: False    
               - country_p: if(immigrant_sim2, align_abs(0.0, count(immigrant_sim2)*cou_3_N1q2, leave=country_b!=5),False)
               - country_b: if(country_p, OtherEU,country_b)     
               - country_p: False    
               - country_p: if(immigrant_sim2, align_abs(0.0, count(immigrant_sim2)*cou_4_N1q2, leave=country_b!=5),False)
               - country_b: if(country_p, WORLD,country_b)     
               
# NACE 4
               - immigrant_sim2: False 
               - to_immigrate: False
               - immigrant_score: if(country_b!=1 and toret<0 and ea and nace4q2, 2, 0)
               - to_immigrate: if(ea and count(nace4q2)<N4q2, align_abs(immigrant_score, N4q2-count(nace4q2)),False) 
               - clone(filter=to_immigrate, immigrant_sim=True, immigrant_sim2=True, country_b=choice([5],[1]))
               - function_nace()
               - immigrant: if(immigrant_sim, True, immigrant)
               - employed: if(immigrant_sim2,True,employed)
               - nace4q2: if(nace4q2 or immigrant_sim2, True, nace4q2)
               - immigrant_new: if(immigrant_sim, True, immigrant_new) 

               - country_p: False    
               - country_p: if(immigrant_sim2, align_abs(0.0, count(immigrant_sim2)*cou_2_N4q2, leave=country_b!=5),False)
               - country_b: if(country_p, EU,country_b)     
               - country_p: False    
               - country_p: if(immigrant_sim2, align_abs(0.0, count(immigrant_sim2)*cou_3_N4q2, leave=country_b!=5),False)
               - country_b: if(country_p, OtherEU,country_b)     
               - country_p: False    
               - country_p: if(immigrant_sim2, align_abs(0.0, count(immigrant_sim2)*cou_4_N4q2, leave=country_b!=5),False)
               - country_b: if(country_p, WORLD,country_b)     
               
# NACE 10 
               - immigrant_sim2: False              
               - to_immigrate: False
               - immigrant_score: if(country_b!=1 and toret<0 and ea and nace10q2, 2, 0)
               - to_immigrate: if(ea and count(nace10q2)<N10q2, align_abs(immigrant_score, N10q2-count(nace10q2)),False)  
               - clone(filter=to_immigrate, immigrant_sim=True, immigrant_sim2=True, country_b=choice([5],[1]))
               - function_nace()
               - immigrant: if(immigrant_sim, True, immigrant)
               - employed: if(immigrant_sim2,True,employed)
               - nace10q2: if(nace10q2 or immigrant_sim2, True, nace10q2)
               - immigrant_new: if(immigrant_sim, True, immigrant_new)    
               
               - country_p: False    
               - country_p: if(immigrant_sim2, align_abs(0.0, count(immigrant_sim2)*cou_2_N10q2, leave=country_b!=5),False)
               - country_b: if(country_p, EU,country_b)     
               - country_p: False    
               - country_p: if(immigrant_sim2, align_abs(0.0, count(immigrant_sim2)*cou_3_N10q2, leave=country_b!=5),False)
               - country_b: if(country_p, OtherEU,country_b)     
               - country_p: False    
               - country_p: if(immigrant_sim2, align_abs(0.0, count(immigrant_sim2)*cou_4_N10q2, leave=country_b!=5),False)
               - country_b: if(country_p, WORLD,country_b)     
               
              
########################## Q3  
# NACE 5    
               - immigrant_sim2: False              
               - to_immigrate: False
               - immigrant_score: if(country_b!=1 and toret<0 and ea and nace5q3, 2, 0)
               - to_immigrate: if(ea and count(nace5q3)<N5q3, align_abs(immigrant_score, N5q3-count(nace5q3)),False) 
               - clone(filter=to_immigrate, immigrant_sim=True, immigrant_sim2=True, country_b=choice([5],[1]))
               - function_nace()
               - immigrant: if(immigrant_sim, True, immigrant)
               - employed: if(immigrant_sim2,True,employed)
               - nace5q3: if(nace5q3 or immigrant_sim2, True, nace5q3)              
               - immigrant_new: if(immigrant_sim, True, immigrant_new)               
               
               - country_p: False    
               - country_p: if(immigrant_sim2, align_abs(0.0, count(immigrant_sim2)*cou_2_N5q3, leave=country_b!=5),False)
               - country_b: if(country_p, EU,country_b)     
               - country_p: False    
               - country_p: if(immigrant_sim2, align_abs(0.0, count(immigrant_sim2)*cou_3_N5q3, leave=country_b!=5),False)
               - country_b: if(country_p, OtherEU,country_b)     
               - country_p: False    
               - country_p: if(immigrant_sim2, align_abs(0.0, count(immigrant_sim2)*cou_4_N5q3, leave=country_b!=5),False)
               - country_b: if(country_p, WORLD,country_b)     
               
# NACE 8  
               - immigrant_sim2: False                           
               - to_immigrate: False
               - immigrant_score: if(country_b!=1 and toret<0 and ea and nace8q3, 2, 0)
               - to_immigrate: if(ea and count(nace8q3)<N8q3, align_abs(immigrant_score, N8q3-count(nace8q3)),False) 
               - clone(filter=to_immigrate, immigrant_sim=True, immigrant_sim2=True, country_b=choice([5],[1]))
               - function_nace()
               - immigrant: if(immigrant_sim, True, immigrant)
               - employed: if(immigrant_sim2,True,employed)
               - nace8q3: if(nace8q3 or immigrant_sim2, True, nace8q3)  
               - immigrant_new: if(immigrant_sim, True, immigrant_new)
               
               - country_p: False    
               - country_p: if(immigrant_sim2, align_abs(0.0, count(immigrant_sim2)*cou_2_N8q3, leave=country_b!=5),False)
               - country_b: if(country_p, EU,country_b)     
               - country_p: False    
               - country_p: if(immigrant_sim2, align_abs(0.0, count(immigrant_sim2)*cou_3_N8q3, leave=country_b!=5),False)
               - country_b: if(country_p, OtherEU,country_b)     
               - country_p: False    
               - country_p: if(immigrant_sim2, align_abs(0.0, count(immigrant_sim2)*cou_4_N8q3, leave=country_b!=5),False)
               - country_b: if(country_p, WORLD,country_b)     
               
# NACE 9   
               - immigrant_sim2: False             
               - to_immigrate: False
               - immigrant_score: if(country_b!=1 and toret<0 and ea and nace9q3, 2, 0)
               - to_immigrate: if(ea and count(nace9q3)<N9q3, align_abs(immigrant_score, N9q3-count(nace9q3)),False) 
               - clone(filter=to_immigrate, immigrant_sim=True, immigrant_sim2=True, country_b=choice([5],[1]))
               - function_nace()
               - immigrant: if(immigrant_sim, True, immigrant)
               - employed: if(immigrant_sim2,True,employed)
               - nace9q3: if(nace9q3 or immigrant_sim2, True, nace9q3)
               - immigrant_new: if(immigrant_sim, True, immigrant_new)               
               
               - country_p: False    
               - country_p: if(immigrant_sim2, align_abs(0.0, count(immigrant_sim2)*cou_2_N9q3, leave=country_b!=5),False)
               - country_b: if(country_p, EU,country_b)     
               - country_p: False    
               - country_p: if(immigrant_sim2, align_abs(0.0, count(immigrant_sim2)*cou_3_N9q3, leave=country_b!=5),False)
               - country_b: if(country_p, OtherEU,country_b)     
               - country_p: False    
               - country_p: if(immigrant_sim2, align_abs(0.0, count(immigrant_sim2)*cou_4_N9q3, leave=country_b!=5),False)
               - country_b: if(country_p, WORLD,country_b)     
               
# NACE 6
               - immigrant_sim2: False 
               - to_immigrate: False
               - immigrant_score: if(country_b!=1 and toret<0 and ea and nace6q3, 2, 0)
               - to_immigrate: if(ea and count(nace6q3)<N6q3, align_abs(immigrant_score, N6q3-count(nace6q3)),False) 
               - clone(filter=to_immigrate, immigrant_sim=True, immigrant_sim2=True, country_b=choice([5],[1]))
               - function_nace()
               - immigrant: if(immigrant_sim, True, immigrant)
               - employed: if(immigrant_sim2,True,employed)
               - nace6q3: if(nace6q3 or immigrant_sim2, True, nace6q3)
               - immigrant_new: if(immigrant_sim, True, immigrant_new) 

               - country_p: False    
               - country_p: if(immigrant_sim2, align_abs(0.0, count(immigrant_sim2)*cou_2_N6q3, leave=country_b!=5),False)
               - country_b: if(country_p, EU,country_b)     
               - country_p: False    
               - country_p: if(immigrant_sim2, align_abs(0.0, count(immigrant_sim2)*cou_3_N6q3, leave=country_b!=5),False)
               - country_b: if(country_p, OtherEU,country_b)     
               - country_p: False    
               - country_p: if(immigrant_sim2, align_abs(0.0, count(immigrant_sim2)*cou_4_N6q3, leave=country_b!=5),False)
               - country_b: if(country_p, WORLD,country_b)     
               
# NACE 2
               - immigrant_sim2: False 
               - to_immigrate: False
               - immigrant_score: if(country_b!=1 and toret<0 and ea and nace2q3, 2, 0)
               - to_immigrate: if(ea and count(nace2q3)<N2q3, align_abs(immigrant_score, N2q3-count(nace2q3)),False) 
               - clone(filter=to_immigrate, immigrant_sim=True, immigrant_sim2=True, country_b=choice([5],[1]))
               - function_nace()
               - immigrant: if(immigrant_sim, True, immigrant)
               - employed: if(immigrant_sim2,True,employed)
               - nace2q3: if(nace2q3 or immigrant_sim2, True, nace2q3)
               - immigrant_new: if(immigrant_sim, True, immigrant_new) 

               - country_p: False    
               - country_p: if(immigrant_sim2, align_abs(0.0, count(immigrant_sim2)*cou_2_N2q3, leave=country_b!=5),False)
               - country_b: if(country_p, EU,country_b)     
               - country_p: False    
               - country_p: if(immigrant_sim2, align_abs(0.0, count(immigrant_sim2)*cou_3_N2q3, leave=country_b!=5),False)
               - country_b: if(country_p, OtherEU,country_b)     
               - country_p: False    
               - country_p: if(immigrant_sim2, align_abs(0.0, count(immigrant_sim2)*cou_4_N2q3, leave=country_b!=5),False)
               - country_b: if(country_p, WORLD,country_b)     
               
# NACE 7
               - immigrant_sim2: False 
               - to_immigrate: False
               - immigrant_score: if(country_b!=1 and toret<0 and ea and nace7q3, 2, 0)
               - to_immigrate: if(ea and count(nace7q3)<N7q3, align_abs(immigrant_score, N7q3-count(nace7q3)),False) 
               - clone(filter=to_immigrate, immigrant_sim=True, immigrant_sim2=True, country_b=choice([5],[1]))
               - function_nace()
               - immigrant: if(immigrant_sim, True, immigrant)
               - employed: if(immigrant_sim2,True,employed)
               - nace7q3: if(nace7q3 or immigrant_sim2, True, nace7q3)
               - immigrant_new: if(immigrant_sim, True, immigrant_new)  
               
               - country_p: False    
               - country_p: if(immigrant_sim2, align_abs(0.0, count(immigrant_sim2)*cou_2_N7q3, leave=country_b!=5),False)
               - country_b: if(country_p, EU,country_b)     
               - country_p: False    
               - country_p: if(immigrant_sim2, align_abs(0.0, count(immigrant_sim2)*cou_3_N7q3, leave=country_b!=5),False)
               - country_b: if(country_p, OtherEU,country_b)     
               - country_p: False    
               - country_p: if(immigrant_sim2, align_abs(0.0, count(immigrant_sim2)*cou_4_N7q3, leave=country_b!=5),False)
               - country_b: if(country_p, WORLD,country_b)     
               
# NACE 3
               - immigrant_sim2: False 
               - to_immigrate: False
               - immigrant_score: if(country_b!=1 and toret<0 and ea and nace3q3, 2, 0)
               - to_immigrate: if(ea and count(nace3q3)<N3q3, align_abs(immigrant_score, N3q3-count(nace3q3)),False) 
               - clone(filter=to_immigrate, immigrant_sim=True, immigrant_sim2=True, country_b=choice([5],[1]))
               - function_nace()
               - immigrant: if(immigrant_sim, True, immigrant)
               - employed: if(immigrant_sim2,True,employed)
               - nace3q3: if(nace3q3 or immigrant_sim2, True, nace3q3)
               - immigrant_new: if(immigrant_sim, True, immigrant_new)

               - country_p: False    
               - country_p: if(immigrant_sim2, align_abs(0.0, count(immigrant_sim2)*cou_2_N3q3, leave=country_b!=5),False)
               - country_b: if(country_p, EU,country_b)     
               - country_p: False    
               - country_p: if(immigrant_sim2, align_abs(0.0, count(immigrant_sim2)*cou_3_N3q3, leave=country_b!=5),False)
               - country_b: if(country_p, OtherEU,country_b)     
               - country_p: False    
               - country_p: if(immigrant_sim2, align_abs(0.0, count(immigrant_sim2)*cou_4_N3q3, leave=country_b!=5),False)
               - country_b: if(country_p, WORLD,country_b)     
               
# NACE 1
               - immigrant_sim2: False 
               - to_immigrate: False
               - immigrant_score: if(country_b!=1 and toret<0 and ea and nace1q3, 2, 0)
               - to_immigrate: if(ea and count(nace1q3)<N1q3, align_abs(immigrant_score, N1q3-count(nace1q3)),False) 
               - clone(filter=to_immigrate, immigrant_sim=True, immigrant_sim2=True, country_b=choice([5],[1]))
               - function_nace()
               - immigrant: if(immigrant_sim, True, immigrant)
               - employed: if(immigrant_sim2,True,employed)
               - nace1q3: if(nace1q3 or immigrant_sim2, True, nace1q3)
               - immigrant_new: if(immigrant_sim, True, immigrant_new)      

               - country_p: False    
               - country_p: if(immigrant_sim2, align_abs(0.0, count(immigrant_sim2)*cou_2_N1q3, leave=country_b!=5),False)
               - country_b: if(country_p, EU,country_b)     
               - country_p: False    
               - country_p: if(immigrant_sim2, align_abs(0.0, count(immigrant_sim2)*cou_3_N1q3, leave=country_b!=5),False)
               - country_b: if(country_p, OtherEU,country_b)     
               - country_p: False    
               - country_p: if(immigrant_sim2, align_abs(0.0, count(immigrant_sim2)*cou_4_N1q3, leave=country_b!=5),False)
               - country_b: if(country_p, WORLD,country_b)     
               
# NACE 4
               - immigrant_sim2: False 
               - to_immigrate: False
               - immigrant_score: if(country_b!=1 and toret<0 and ea and nace4q3, 2, 0)
               - to_immigrate: if(ea and count(nace4q3)<N4q3, align_abs(immigrant_score, N4q3-count(nace4q3)),False) 
               - clone(filter=to_immigrate, immigrant_sim=True, immigrant_sim2=True, country_b=choice([5],[1]))
               - function_nace()
               - immigrant: if(immigrant_sim, True, immigrant)
               - employed: if(immigrant_sim2,True,employed)
               - nace4q3: if(nace4q3 or immigrant_sim2, True, nace4q3)
               - immigrant_new: if(immigrant_sim, True, immigrant_new) 
               
               - country_p: False    
               - country_p: if(immigrant_sim2, align_abs(0.0, count(immigrant_sim2)*cou_2_N4q3, leave=country_b!=5),False)
               - country_b: if(country_p, EU,country_b)     
               - country_p: False    
               - country_p: if(immigrant_sim2, align_abs(0.0, count(immigrant_sim2)*cou_3_N4q3, leave=country_b!=5),False)
               - country_b: if(country_p, OtherEU,country_b)     
               - country_p: False    
               - country_p: if(immigrant_sim2, align_abs(0.0, count(immigrant_sim2)*cou_4_N4q3, leave=country_b!=5),False)
               - country_b: if(country_p, WORLD,country_b)     

# NACE 10  
               - immigrant_sim2: False             
               - to_immigrate: False
               - immigrant_score: if(country_b!=1 and toret<0 and ea and nace10q3, 2, 0)
               - to_immigrate: if(ea and count(nace10q3)<N10q3, align_abs(immigrant_score, N10q3-count(nace10q3), leave=country_b==1),False) 
               - clone(filter=to_immigrate, immigrant_sim=True, immigrant_sim2=True, country_b=choice([5],[1]))
               - function_nace()
               - immigrant: if(immigrant_sim, True, immigrant)
               - employed: if(immigrant_sim2,True,employed)
               - nace10q3: if(nace10q3 or immigrant_sim2, True, nace10q3)
               - immigrant_new: if(immigrant_sim, True, immigrant_new)     

               - country_p: False    
               - country_p: if(immigrant_sim2, align_abs(0.0, count(immigrant_sim2)*cou_2_N10q3, leave=country_b!=5),False)
               - country_b: if(country_p, EU,country_b)     
               - country_p: False    
               - country_p: if(immigrant_sim2, align_abs(0.0, count(immigrant_sim2)*cou_3_N10q3, leave=country_b!=5),False)
               - country_b: if(country_p, OtherEU,country_b)     
               - country_p: False    
               - country_p: if(immigrant_sim2, align_abs(0.0, count(immigrant_sim2)*cou_4_N10q3, leave=country_b!=5),False)
               - country_b: if(country_p, WORLD,country_b)     
              
                
########################## Q4  
# NACE 5    
               - immigrant_sim2: False              
               - to_immigrate: False
               - immigrant_score: if(country_b!=1 and toret<0 and ea and nace5q4, 2, 0)
               - to_immigrate: if(ea and count(nace5q4)<N5q4, align_abs(immigrant_score, N5q4-count(nace5q4)),False) 
               - clone(filter=to_immigrate, immigrant_sim=True, immigrant_sim2=True, country_b=choice([5],[1]))
               - function_nace()
               - immigrant: if(immigrant_sim, True, immigrant)
               - employed: if(immigrant_sim2,True,employed)
               - nace5q4: if(nace5q4 or immigrant_sim2, True, nace5q4)              
               - immigrant_new: if(immigrant_sim, True, immigrant_new)               
               
               - country_p: False    
               - country_p: if(immigrant_sim2, align_abs(0.0, count(immigrant_sim2)*cou_2_N5q4, leave=country_b!=5),False)
               - country_b: if(country_p, EU,country_b)     
               - country_p: False    
               - country_p: if(immigrant_sim2, align_abs(0.0, count(immigrant_sim2)*cou_3_N5q4, leave=country_b!=5),False)
               - country_b: if(country_p, OtherEU,country_b)     
               - country_p: False    
               - country_p: if(immigrant_sim2, align_abs(0.0, count(immigrant_sim2)*cou_4_N5q4, leave=country_b!=5),False)
               - country_b: if(country_p, WORLD,country_b)     
               
# NACE 8  
               - immigrant_sim2: False                           
               - to_immigrate: False
               - immigrant_score: if(country_b!=1 and toret<0 and ea and nace8q4, 2, 0)
               - to_immigrate: if(ea and count(nace8q4)<N8q4, align_abs(immigrant_score, N8q4-count(nace8q4)),False) 
               - clone(filter=to_immigrate, immigrant_sim=True, immigrant_sim2=True, country_b=choice([5],[1]))
               - function_nace()
               - immigrant: if(immigrant_sim, True, immigrant)
               - employed: if(immigrant_sim2,True,employed)
               - nace8q4: if(nace8q4 or immigrant_sim2, True, nace8q4)  
               - immigrant_new: if(immigrant_sim, True, immigrant_new)
               
               - country_p: False    
               - country_p: if(immigrant_sim2, align_abs(0.0, count(immigrant_sim2)*cou_2_N8q4, leave=country_b!=5),False)
               - country_b: if(country_p, EU,country_b)     
               - country_p: False    
               - country_p: if(immigrant_sim2, align_abs(0.0, count(immigrant_sim2)*cou_3_N8q4, leave=country_b!=5),False)
               - country_b: if(country_p, OtherEU,country_b)     
               - country_p: False    
               - country_p: if(immigrant_sim2, align_abs(0.0, count(immigrant_sim2)*cou_4_N8q4, leave=country_b!=5),False)
               - country_b: if(country_p, WORLD,country_b)     
               
# NACE 9   
               - immigrant_sim2: False             
               - to_immigrate: False
               - immigrant_score: if(country_b!=1 and toret<0 and ea and nace9q4, 2, 0)
               - to_immigrate: if(ea and count(nace9q4)<N9q4, align_abs(immigrant_score, N9q4-count(nace9q4)),False) 
               - clone(filter=to_immigrate, immigrant_sim=True, immigrant_sim2=True, country_b=choice([5],[1]))
               - function_nace()
               - immigrant: if(immigrant_sim, True, immigrant)
               - employed: if(immigrant_sim2,True,employed)
               - nace9q4: if(nace9q4 or immigrant_sim2, True, nace9q4)
               - immigrant_new: if(immigrant_sim, True, immigrant_new)               
               
               - country_p: False    
               - country_p: if(immigrant_sim2, align_abs(0.0, count(immigrant_sim2)*cou_2_N9q4, leave=country_b!=5),False)
               - country_b: if(country_p, EU,country_b)     
               - country_p: False    
               - country_p: if(immigrant_sim2, align_abs(0.0, count(immigrant_sim2)*cou_3_N9q4, leave=country_b!=5),False)
               - country_b: if(country_p, OtherEU,country_b)     
               - country_p: False    
               - country_p: if(immigrant_sim2, align_abs(0.0, count(immigrant_sim2)*cou_4_N9q4, leave=country_b!=5),False)
               - country_b: if(country_p, WORLD,country_b)     
               
# NACE 6
               - immigrant_sim2: False 
               - to_immigrate: False
               - immigrant_score: if(country_b!=1 and toret<0 and ea and nace6q4, 2, 0)
               - to_immigrate: if(ea and count(nace6q4)<N6q4, align_abs(immigrant_score, N6q4-count(nace6q4)),False) 
               - clone(filter=to_immigrate, immigrant_sim=True, immigrant_sim2=True, country_b=choice([5],[1]))
               - function_nace()
               - immigrant: if(immigrant_sim, True, immigrant)
               - employed: if(immigrant_sim2,True,employed)
               - nace6q4: if(nace6q4 or immigrant_sim2, True, nace6q4)
               - immigrant_new: if(immigrant_sim, True, immigrant_new) 

               - country_p: False    
               - country_p: if(immigrant_sim2, align_abs(0.0, count(immigrant_sim2)*cou_2_N6q4, leave=country_b!=5),False)
               - country_b: if(country_p, EU,country_b)     
               - country_p: False    
               - country_p: if(immigrant_sim2, align_abs(0.0, count(immigrant_sim2)*cou_3_N6q4, leave=country_b!=5),False)
               - country_b: if(country_p, OtherEU,country_b)     
               - country_p: False    
               - country_p: if(immigrant_sim2, align_abs(0.0, count(immigrant_sim2)*cou_4_N6q4, leave=country_b!=5),False)
               - country_b: if(country_p, WORLD,country_b)     
               
# NACE 2
               - immigrant_sim2: False 
               - to_immigrate: False
               - immigrant_score: if(country_b!=1 and toret<0 and ea and nace2q4, 2, 0)
               - to_immigrate: if(ea and count(nace2q4)<N2q4, align_abs(immigrant_score, N2q4-count(nace2q4)),False) 
               - clone(filter=to_immigrate, immigrant_sim=True, immigrant_sim2=True, country_b=choice([5],[1]))
               - function_nace()
               - immigrant: if(immigrant_sim, True, immigrant)
               - employed: if(immigrant_sim2,True,employed)
               - nace2q4: if(nace2q4 or immigrant_sim2, True, nace2q4)
               - immigrant_new: if(immigrant_sim, True, immigrant_new) 

               - country_p: False    
               - country_p: if(immigrant_sim2, align_abs(0.0, count(immigrant_sim2)*cou_2_N2q4, leave=country_b!=5),False)
               - country_b: if(country_p, EU,country_b)     
               - country_p: False    
               - country_p: if(immigrant_sim2, align_abs(0.0, count(immigrant_sim2)*cou_3_N2q4, leave=country_b!=5),False)
               - country_b: if(country_p, OtherEU,country_b)     
               - country_p: False    
               - country_p: if(immigrant_sim2, align_abs(0.0, count(immigrant_sim2)*cou_4_N2q4, leave=country_b!=5),False)
               - country_b: if(country_p, WORLD,country_b)     
               
# NACE 7
               - immigrant_sim2: False 
               - to_immigrate: False
               - immigrant_score: if(country_b!=1 and toret<0 and ea and nace7q4, 2, 0)
               - to_immigrate: if(ea and count(nace7q4)<N7q4, align_abs(immigrant_score, N7q4-count(nace7q4)),False) 
               - clone(filter=to_immigrate, immigrant_sim=True, immigrant_sim2=True, country_b=choice([5],[1]))
               - function_nace()
               - immigrant: if(immigrant_sim, True, immigrant)
               - employed: if(immigrant_sim2,True,employed)
               - nace7q4: if(nace7q4 or immigrant_sim2, True, nace7q4)
               - immigrant_new: if(immigrant_sim, True, immigrant_new)  
               
               - country_p: False    
               - country_p: if(immigrant_sim2, align_abs(0.0, count(immigrant_sim2)*cou_2_N7q4, leave=country_b!=5),False)
               - country_b: if(country_p, EU,country_b)     
               - country_p: False    
               - country_p: if(immigrant_sim2, align_abs(0.0, count(immigrant_sim2)*cou_3_N7q4, leave=country_b!=5),False)
               - country_b: if(country_p, OtherEU,country_b)     
               - country_p: False    
               - country_p: if(immigrant_sim2, align_abs(0.0, count(immigrant_sim2)*cou_4_N7q4, leave=country_b!=5),False)
               - country_b: if(country_p, WORLD,country_b)     
               
# NACE 3
               - immigrant_sim2: False 
               - to_immigrate: False
               - immigrant_score: if(country_b!=1 and toret<0 and ea and nace3q4, 2, 0)
               - to_immigrate: if(ea and count(nace3q4)<N3q4, align_abs(immigrant_score, N3q4-count(nace3q4)),False) 
               - clone(filter=to_immigrate, immigrant_sim=True, immigrant_sim2=True, country_b=choice([5],[1]))
               - function_nace()
               - immigrant: if(immigrant_sim, True, immigrant)
               - employed: if(immigrant_sim2,True,employed)
               - nace3q4: if(nace3q4 or immigrant_sim2, True, nace3q4)
               - immigrant_new: if(immigrant_sim, True, immigrant_new)

               - country_p: False    
               - country_p: if(immigrant_sim2, align_abs(0.0, count(immigrant_sim2)*cou_2_N3q4, leave=country_b!=5),False)
               - country_b: if(country_p, EU,country_b)     
               - country_p: False    
               - country_p: if(immigrant_sim2, align_abs(0.0, count(immigrant_sim2)*cou_3_N3q4, leave=country_b!=5),False)
               - country_b: if(country_p, OtherEU,country_b)     
               - country_p: False    
               - country_p: if(immigrant_sim2, align_abs(0.0, count(immigrant_sim2)*cou_4_N3q4, leave=country_b!=5),False)
               - country_b: if(country_p, WORLD,country_b)     
               
# NACE 1
               - immigrant_sim2: False 
               - to_immigrate: False
               - immigrant_score: if(country_b!=1 and toret<0 and ea and nace1q4, 2, 0)
               - to_immigrate: if(ea and count(nace1q4)<N1q4, align_abs(immigrant_score, N1q4-count(nace1q4)),False) 
               - clone(filter=to_immigrate, immigrant_sim=True, immigrant_sim2=True, country_b=choice([5],[1]))
               - function_nace()
               - immigrant: if(immigrant_sim, True, immigrant)
               - employed: if(immigrant_sim2,True,employed)
               - nace1q4: if(nace1q4 or immigrant_sim2, True, nace1q4)
               - immigrant_new: if(immigrant_sim, True, immigrant_new)      

               - country_p: False    
               - country_p: if(immigrant_sim2, align_abs(0.0, count(immigrant_sim2)*cou_2_N1q4, leave=country_b!=5),False)
               - country_b: if(country_p, EU,country_b)     
               - country_p: False    
               - country_p: if(immigrant_sim2, align_abs(0.0, count(immigrant_sim2)*cou_3_N1q4, leave=country_b!=5),False)
               - country_b: if(country_p, OtherEU,country_b)     
               - country_p: False    
               - country_p: if(immigrant_sim2, align_abs(0.0, count(immigrant_sim2)*cou_4_N1q4, leave=country_b!=5),False)
               - country_b: if(country_p, WORLD,country_b)     
               
# NACE 4
               - immigrant_sim2: False 
               - to_immigrate: False
               - immigrant_score: if(country_b!=1 and toret<0 and ea and nace4q4, 2, 0)
               - to_immigrate: if(ea and count(nace4q4)<N4q4, align_abs(immigrant_score, N4q4-count(nace4q4)),False) 
               - clone(filter=to_immigrate, immigrant_sim=True, immigrant_sim2=True, country_b=choice([5],[1]))
               - function_nace()
               - immigrant: if(immigrant_sim, True, immigrant)
               - employed: if(immigrant_sim2,True,employed)
               - nace4q4: if(nace4q4 or immigrant_sim2, True, nace4q4)
               - immigrant_new: if(immigrant_sim, True, immigrant_new) 
               
               - country_p: False    
               - country_p: if(immigrant_sim2, align_abs(0.0, count(immigrant_sim2)*cou_2_N4q4, leave=country_b!=5),False)
               - country_b: if(country_p, EU,country_b)     
               - country_p: False    
               - country_p: if(immigrant_sim2, align_abs(0.0, count(immigrant_sim2)*cou_3_N4q4, leave=country_b!=5),False)
               - country_b: if(country_p, OtherEU,country_b)     
               - country_p: False    
               - country_p: if(immigrant_sim2, align_abs(0.0, count(immigrant_sim2)*cou_4_N4q4, leave=country_b!=5),False)
               - country_b: if(country_p, WORLD,country_b)     

# NACE 10  
               - immigrant_sim2: False             
               - to_immigrate: False
               - immigrant_score: if(country_b!=1 and toret<0 and ea and nace10q4, 2, 0)
               - to_immigrate: if(ea and count(nace10q4)<N10q4, align_abs(immigrant_score, N10q4-count(nace10q4), leave=country_b==1),False) 
               - clone(filter=to_immigrate, immigrant_sim=True, immigrant_sim2=True, country_b=choice([5],[1]))
               - function_nace()
               - immigrant: if(immigrant_sim, True, immigrant)
               - employed: if(immigrant_sim2,True,employed)
               - nace10q4: if(nace10q4 or immigrant_sim2, True, nace10q4)
               - immigrant_new: if(immigrant_sim, True, immigrant_new)     

               - country_p: False    
               - country_p: if(immigrant_sim2, align_abs(0.0, count(immigrant_sim2)*cou_2_N10q4, leave=country_b!=5),False)
               - country_b: if(country_p, EU,country_b)     
               - country_p: False    
               - country_p: if(immigrant_sim2, align_abs(0.0, count(immigrant_sim2)*cou_3_N10q4, leave=country_b!=5),False)
               - country_b: if(country_p, OtherEU,country_b)     
               - country_p: False    
               - country_p: if(immigrant_sim2, align_abs(0.0, count(immigrant_sim2)*cou_4_N10q4, leave=country_b!=5),False)
               - country_b: if(country_p, WORLD,country_b)     


               - country_b: if(country_b==5, WORLD, country_b) 
# base scenario              
               - tab_v: load('vek_mig.csv', fields=[('PERIOD', int), ('A_15', float), ('A_16', float), ('A_17', float), ('A_18', float), ('A_19', float), ('A_20', float), ('A_21', float), ('A_22', float), ('A_23', float), ('A_24', float)])
               - age: if(immigrant_sim, choice([15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54],  
                    [0.0001,0.0084,0.0187,0.0283,0.034,0.0361,0.0394,0.0427,0.0439,0.0443,0.0423,0.0419,0.0417,0.0416,0.0383,0.037,0.0335,0.0331,0.0321,0.0293,0.0295,0.0243,0.0236,0.0234,0.0213,0.0209,0.0188,0.0184,0.0177,0.016,0.0153,0.0142,0.0136,0.0124,0.0122,0.0112,0.0102,0.011,0.0097,0.0096]), age)

                      
####################################################################
##  Employed immigrants attracted to Slovakia because of existing job vacancies are going to bring over also some family members. These are cloned out of the existing family 
##  members of employed immigrants already in Slovakia. Cloning is done separately for students (kids), retired, disabled and other inactive family members. 
##  The process is set up to reproduce the household structure of immigrants separately from EU and non-EU countries, using fixed coefficients of students, retired, disabled 
##  and inactive per an employed immigrant.
####################################################################

            immigrants_family():             
# Student               
               - immigrant_fam_p: False 
               - to_immigrate: False
               - to_immigrate: if(immigrant_sim and employed and country_b==2, align_abs(0.0, round(count(immigrant_sim and country_b==2) * 0.0420260782)),False) 
               - clone(filter=to_immigrate, immigrant_fam_p=True, ageg=choice([1, 2], [0.902205882, 0.097794118]))
               - to_immigrate: False
               - to_immigrate: if(immigrant_sim and employed and country_b==3, align_abs(0.0, round(count(immigrant_sim and country_b==3) * 0.036235531)),False) 
               - clone(filter=to_immigrate, immigrant_fam_p=True, ageg=choice([1, 2], [0.947075209, 0.052924791]))
               - to_immigrate: False
               - to_immigrate: if(immigrant_sim and employed and country_b==4, align_abs(0.0, round(count(immigrant_sim and country_b==4) * 0.091620856)),False) 
               - clone(filter=to_immigrate, immigrant_fam_p=True, ageg=choice([1, 2], [0.427083333, 0.572916667]))
               - immigrant_fam: if(immigrant_fam_p, True, immigrant_fam)
               - status: if(immigrant_fam_p, 3, status)
               - employed: if(immigrant_fam_p, False, employed)
               - ea: if(immigrant_fam_p, False, ea)
               - age:
                    if(immigrant_fam_p and status==3,
                     if(ageg==1, 
                       choice([0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14], 
                       [0.069358555, 0.067799454, 0.067117497, 0.06683424, 0.067613791, 0.073171806, 0.069157419, 0.071214004, 0.067863723, 0.064791937, 0.064158776, 0.06481336, 0.064214713, 0.061428565, 0.06046216]),              
                       choice([15, 16, 17, 18, 19],
                       [0.18550948, 0.197905341, 0.201253627, 0.20455511, 0.210776442])), age)

# Retired               
               - immigrant_fam_p: False 
               - to_immigrate: False
               - to_immigrate: if(immigrant_sim and employed and country_b==2, align_abs(0.0, round(count(immigrant_sim and employed and country_b==2) * 0.023671013)),False) 
               - clone(filter=to_immigrate, immigrant_fam_p=True, ageg=choice([12, 13, 14], [0.542489665, 0.291685806, 0.165824529]))
               - to_immigrate: False
               - to_immigrate: if(immigrant_sim and employed and country_b==3, align_abs(0.0, round(count(immigrant_sim and employed and country_b==3) * 0.022521389)),False) 
               - clone(filter=to_immigrate, immigrant_fam_p=True, ageg=choice([12, 13, 14], [0.206472492, 0.218338727, 0.575188781]))
               - to_immigrate: False
               - to_immigrate: if(immigrant_sim and employed and country_b==4, align_abs(0.0, round(count(immigrant_sim and employed and country_b==4) * 0.031817425)),False) 
               - clone(filter=to_immigrate, immigrant_fam_p=True, ageg=choice([12, 13, 14], [0.356756757, 0.19009009, 0.453153153]))
               - immigrant_fam: if(immigrant_fam_p, True, immigrant_fam)
               - status: if(immigrant_fam_p, 4, status)
               - employed: if(immigrant_fam_p, False, employed)
               - ea: if(immigrant_fam_p, False, ea)
               - age:
                    if(immigrant_fam_p and status==4,
                    if(ageg==12,
                      choice([65, 66, 67, 68, 69],
                      [0.229217138, 0.214725163, 0.194134665, 0.186648433, 0.175274602]),
                    if(ageg==13,
                      choice([70, 71, 72, 73, 74],
                      [0.223068166, 0.202906138, 0.205792962, 0.1871455, 0.181087235]),
                      choice([75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99],
                      [0.107107746, 0.101641213, 0.090986794, 0.082852742, 0.07563604, 0.070376145, 0.066650386, 0.060228931, 0.055639046, 0.052326564, 0.045714125, 0.039565057, 0.032971402, 0.027000795, 0.022028942, 0.017761539, 0.014161015, 0.011305644, 0.008531675, 0.006480942, 0.00457423, 0.002902335, 0.00200377, 0.000829686, 0.000723236]))),age)
# Disabled
               - immigrant_fam_p: False 
               - to_immigrate: False
               - to_immigrate: if(immigrant_sim and employed and country_b==2 and age>24 and age<62, align_abs(0.0, round(count(immigrant_sim and country_b==2) * 0.0941825476)),False) 
               - clone(filter=to_immigrate, immigrant_fam_p=True)
               - to_immigrate: False
               - to_immigrate: if(immigrant_sim and employed and country_b==3 and age>24 and age<62, align_abs(0.0, round(count(immigrant_sim and country_b==3) * 0.0)),False) 
               - clone(filter=to_immigrate, immigrant_fam_p=True)
               - to_immigrate: False
               - to_immigrate: if(immigrant_sim and employed and country_b==4 and age>24 and age<62, align_abs(0.0, round(count(immigrant_sim and country_b==4) * 0.0)),False) 
               - clone(filter=to_immigrate, immigrant_fam_p=True)
               - immigrant_fam: if(immigrant_fam_p, True, immigrant_fam)
               - status: if(immigrant_fam_p, 5, status) 
               - employed: if(immigrant_fam_p, False, employed)
               - ea: if(immigrant_fam_p, False, ea)               
# Inactive
               - immigrant_fam_p: False 
               - to_immigrate: False
               - to_immigrate: if(immigrant_sim and employed and country_b==2 and age>24 and age<62, align_abs(0.0, round(count(immigrant_sim and employed and country_b==2 ) * 0.442326981)),False) 
               - clone(filter=to_immigrate, immigrant_fam_p=True)
               - to_immigrate: False
               - to_immigrate: if(immigrant_sim and employed and country_b==3 and age>24 and age<62, align_abs(0.0, round(count(immigrant_sim and employed and country_b==3) * 0.126572723)),False) 
               - clone(filter=to_immigrate, immigrant_fam_p=True)
               - to_immigrate: False
               - to_immigrate: if(immigrant_sim and employed and country_b==4 and age>24 and age<62, align_abs(0.0, round(count(immigrant_sim and employed and country_b==4) * 0.110278194)),False) 
               - clone(filter=to_immigrate, immigrant_fam_p=True)
               - immigrant_fam: if(immigrant_fam_p, True, immigrant_fam)
               - status: if(immigrant_fam_p, 6, status)  
               - employed: if(immigrant_fam_p, False, employed)               
               - ea: if(immigrant_fam_p, False, ea)                  

               - time_to_leave: if(immigrant_sim, 0, time_to_leave)

####################################################################
##  After matching is performed and jobs are being filled by either Slovak or immigrants, the process “employment_nace_qual” changes the attributes (fields) of those in 
##  employment based on the result of previous processes. 
####################################################################
               
            employment_nace_qual():              
              
               - nace: -1
               - qual: -1

 
               - nace: if(nace1q1 or nace1q2 or nace1q3 or nace1q4, 1, nace)
               - nace: if(nace2q1 or nace2q2 or nace2q3 or nace2q4, 2, nace)
               - nace: if(nace3q1 or nace3q2 or nace3q3 or nace3q4, 3, nace)
               - nace: if(nace4q1 or nace4q2 or nace4q3 or nace4q4, 4, nace)
               - nace: if(nace5q1 or nace5q2 or nace5q3 or nace5q4, 5, nace)
               - nace: if(nace6q1 or nace6q2 or nace6q3 or nace6q4, 6, nace)
               - nace: if(nace7q1 or nace7q2 or nace7q3 or nace7q4, 7, nace)
               - nace: if(nace8q1 or nace8q2 or nace8q3 or nace8q4, 8, nace)
               - nace: if(nace9q1 or nace9q2 or nace9q3 or nace9q4, 9, nace)
               - nace: if(nace10q1 or nace10q2 or nace10q3 or nace10q4, 10, nace)
                            
                    
               - qual: if(nace1q1 or nace2q1 or nace3q1 or nace4q1 or nace5q1 or nace6q1 or nace7q1 or nace8q1 or nace9q1 or nace10q1, 1, qual)
               - qual: if(nace1q2 or nace2q2 or nace3q2 or nace4q2 or nace5q2 or nace6q2 or nace7q2 or nace8q2 or nace9q2 or nace10q2, 2, qual)
               - qual: if(nace1q3 or nace2q3 or nace3q3 or nace4q3 or nace5q3 or nace6q3 or nace7q3 or nace8q3 or nace9q3 or nace10q3, 3, qual)
               - qual: if(nace1q4 or nace2q4 or nace3q4 or nace4q4 or nace5q4 or nace6q4 or nace7q4 or nace8q4 or nace9q4 or nace10q4, 4, qual)
    
              
               - ea: if(nace==-1 and working_retired==True, False, ea)
               - status: if(status==-1 and working_retired==True and nace==-1, RETIRED, status)                
               - working_retired: if(working_retired==True and nace==-1, False, working_retired)

####################################################################               
##  Those, assigned as economically active in the EA module, but not assigned as employed by the matching in the EMPL module are considered to be unemployed and their status 
##  is being changed accordingly. 
####################################################################               
               
            unemployment():               
               - status: if(ea and nace==-1, UNEMPLOYED, status)
               - status: if(ea and not nace==-1, EMPLOYED, status)
               - status: if(ea and status==UNEMPLOYED and toret>=0, RETIRED, status)

               
###################################################################
##  After all the simulation processes are performed, in the very last step, the results of the simulation are recorded in a spreadsheet format. This final process named 
##  “csv_output” used a LIAM2 build in function ”csv”. This function saves a spreadsheet file in CSV format following the structure predefined in the attributes of the command,
##  defines the name of the file saved file (the default location for saving these files is the “OUTPUT_DATA” defined in the Simulation section of the script.
##  Before the creating the csv files, working variables (replacement and matched) are defined. Some of them are going to be used in the csv exports. The only csv file being 
##  created by the documented version of the script is the follows :
##  csv (period, groupby(period, sex, status, period), fname='status.csv', mode='a'), where
##  Where: 
##  period – indicate year of simulation to be used in the first (left) column of the newly created table (A column, when opened in MS Excel)
##  groupby – saves counts by the categories defined in the brackets (period, sex, status, period)
##  fname – allows defining the exact file name of the saved file. 
##  mode – allows appending results of subsequent simulations (mode=’a’) to a csv file, or overwriting it (mode=’b’ by default). Mode=’a’ allows, for example, to store the value
##  of some expression for all periods in the same file (instead of one file per period by default).
####################################################################
             
            csv_output():
               - replacement: if(status1y==1 and status>=4, True, False)
               - replacement_inflow: if(status==1 and status1y>=4, True, False)
               - matched: if(status==EMPLOYED and ((hatlev3==3 and qual==1) or (hatlev3==2 and qual==2) or (hatlev3==2 and qual==3) or (hatlev3==1 and qual==4)), True, False)
#               - csv(period, groupby(period, sex, status, age, immigrant, immigrant_new, period), fname='o1_JPM_lab_supply_age.csv', mode='a')
#               - csv(period, groupby(period, sex, status, nace, qual, immigrant, immigrant_new, period), fname='nace_immigrant.csv', mode='a')
#               - csv(period, groupby(period, sex, lag(nace), hatlev5, replacement, status,status1y, period), fname='replacement_hatlev.csv', mode='a')
               - csv(period, groupby(period, sex, immigrant, replacement, status,status1y, replacement_inflow, period), fname='replacement_hatlev.csv', mode='a')

#               - csv(period, groupby(period, sex, lag(nace), nace, replacement, status,status1y, period), fname='replacement_nace.csv', mode='a')
#               - csv(period, groupby(period, sex, lag(nace), hatfield, replacement,status1y, status, period), fname='replacement_hatfield.csv', mode='a')
#               - csv(period, groupby(period, sex, status, age, replacement, hatlev5,status1y, period), fname='age.csv', mode='a')
#               - csv(period, groupby(period, sex, status, status1y, hatlev5, replacement, hatfield,period), fname='replacement_hatlev_hatfield.csv', mode='a')

#               - csv(period, groupby(period, sex, status, hatlev5, qual, immigrant, immigrant_new, period), fname='verifikacia.csv', mode='a')
#               - csv(period, groupby(period, sex, status, hatlev5, immigrant_sim, immigrant, qual, period), fname='inflow.csv', mode='a')

#               - csv(period, groupby(period, status, qual, nace, status1y, lag(nace), region), fname='status.csv', mode='a')
#               - csv(groupby(lag(nace, qual), nace, qual), fname='nace.csv', mode='a')
#               - csv(period, groupby(period, lag(nace), nace, lag(qual), qual, age, replacement, working_retired, hatlev5), fname='o6_JPM_replacement.csv', mode='a')
#               - csv(period, groupby(period, hatlev5, hatfield1, status, nace, qual, region, filter=ea), fname='scenario1_edu.csv', mode='a')
#               - csv(period, groupby(period, country_b, qual, nace, hatlev3, status, immigrant), fname='o7_JPM__immigrant.csv', mode='a')                
#                - csv(period, groupby(period, lag(nace_compl), replacement, status_compl, nace_compl, qual_compl, region), fname='base_compl_replacement_nace2.csv', mode='a')             
#              - csv(period, groupby(period, lag(nace), replacement, status, nace, qual, region), fname='scenario1_replacement_nace1.csv', mode='a')             
#               - csv(period, groupby(period, nace, nace_compl, status_compl, status, qual, qual_compl, region), fname='base_compl_status.csv', mode='a')               
#               - csv(period, groupby(lag(nace_compl), lag(qual_compl), status), fname='replacement_ret_nace.csv', mode='a')              
#              - csv(period, groupby(lag(hatlev5), lag(hatfield1), status), fname='replacement_ret_edu.csv', mode='a')              
#               - csv(groupby(lag(nace), status, period), fname='replacement_status.csv', mode='a')              
#               - csv(period, groupby(lag(nace), working_retired), fname='working_retired.csv', mode='a')
#               - csv(period, groupby(lag(nace), retired_early), fname='retired early.csv', mode='a')  
#               - csv(period, groupby (period, age, working_retired, nace_compl, region, filter=age>=60), fname='working_retired.csv', mode='a') 


simulation: 
    init: 
        - person: [age1, nace1, edulev_init, status1, time_to_leave1]  
    processes:
        - person: [ageing, birth, death, immigration, edulev, edufield, statusing, study, retirement, inactivity, disability, economic_activity, employment, employment_nace_score, employment_old, employment_new, employment_immigrants, employment_nace_qual ,unemployment, csv_output]
    input:
        path:   "INPUT_DATA"
        file:   "lfs2018.h5"

    output:
        path:   "OUTPUT_DATA"
        file:   "simulation.h5"
        
    start_period: 2019
    
    periods: 12
    
    random_seed: 10000    
     
     
     
     
     
     